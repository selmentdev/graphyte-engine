import subprocess
import os
import platform
import datetime
import math
import uuid
import hashlib
import sys
import logging
import re
import json

is_win = sys.platform == "win32"
is_py_3 = sys.version_info[0] == 3
if is_win:
    if is_py_3:
        import winreg
    else:
        import _winreg as winreg
        import exceptions

#---------------------------------------------------------------------------------------------------
# Internal commands

def _bootstrap_execute_command(args):
    try:
        return subprocess.check_output(args).decode('utf-8').splitlines()
    except:
        return None

def _bootstrap_emit_header(file):
    file.write('//--------------------------------------------------------------------------------------------------\n')
    file.write("// This file was generated by 'bootstrap.py'\n\n")
    
    
#---------------------------------------------------------------------------------------------------
# MSVS Locator service

if 'ProgramFiles(x86)' in os.environ:
    MSVC_DEFAULT_PATH = os.path.join(os.environ['ProgramFiles(x86)'], 'Microsoft Visual Studio', 'Installer', 'vswhere.exe')
else:
    MSVC_DEFAULT_PATH = None

def _msvc_find_vswhere():
    if MSVC_DEFAULT_PATH and os.path.exists(MSVC_DEFAULT_PATH):
        return MSVC_DEFAULT_PATH

    return None

def _msvc_get_installation(vswhere):
    args = [
        vswhere,
        '-utf8',
        '-latest',
        '-products', '*',
        '-format', 'json'
    ]
    
    result = subprocess.check_output(args).decode('utf-8')
    return json.loads(result)

#---------------------------------------------------------------------------------------------------
# Generate BFF file with MSVC compiler

def generate_msvc_compiler_info():
    vswhere = _msvc_find_vswhere()
    vsinstance = _msvc_get_installation(vswhere)[0]
    vsname = vsinstance['displayName']
    vspath = vsinstance['installationPath']
    
    msvs_tools_version_location = os.path.join(vspath, 'VC', 'Auxiliary', 'Build', 'Microsoft.VCToolsVersion.default.txt')
    with open(msvs_tools_version_location, 'r') as file:
        vstools = file.read().splitlines()[0]

    # Generate header
    with open('scripts/compiler.msvs.bff', 'w') as f:
        _bootstrap_emit_header(f)

        f.write(".VsToolsLocation = '{}'\n".format(vspath))
        f.write(".VsToolsName = '{}'\n".format(vsname))
        f.write(".VsToolsVersion = '{}'\n".format(vstools))







def sub_keys(key):
    i = 0
    while True:
        try:
            sub_key = winreg.EnumKey(key, i)
            yield sub_key
            i += 1
        except: # WindowsError as e:
            #log.error(e)
            break


def sub_values(key):
    i = 0
    while True:
        try:
            v = winreg.EnumValue(key, i)
            yield v
            i += 1
        except: # WindowsError as e:
            #log.error(e)
            break

def get_installed_windows_kits():
    roots_key = r"SOFTWARE\Microsoft\Windows Kits\Installed Roots"
#    log.info("Searching for Windows kits in registry path: {}".format(roots_key))
    roots = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, roots_key, 0,
                           winreg.KEY_READ)
    kits = []
    pattern = re.compile(r'KitsRoot(\d+)')

    for (name, value, value_type) in sub_values(roots):
        if value_type == winreg.REG_SZ and name.startswith('KitsRoot'):
            match = pattern.search(name)
            if match:
                version = match.group(1)
                kits.append({'version': version, 'value': value})

    if not kits:
       print("""
            No windows kits found in the registry.
            Consider downloading and installing the latest kit, either from
            https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-download-tools
            or from
            https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk
        """)
        #exit(1)

    return kits

#'HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Microsoft SDKs\\Windows\\v10.0\\InstallationFolder'
#"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows Kits\\Installed Roots;KitsRoot10",

        #print(_bootstrap_execute_command(['reg', 'query', "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows Kits\\Installed Roots", '/v', '"KitsRoot10"']))
        #print(_bootstrap_execute_command(['reg', 'query', "HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows Kits\\Installed Roots", '/v', '"KitsRoot10"']))

print(get_installed_windows_kits())


def generate_version_file():
    os.makedirs('./engine/include/Graphyte', exist_ok=True)
    with open('engine/include/Graphyte/Build.Version.hxx', 'w+') as file:
        os_version = platform.win32_ver()[1]
        os_host = platform.system()

        build_commit = _bootstrap_execute_command('git log -1 --format=%H')
        build_commit_short = _bootstrap_execute_command('git log -1 --format=%h')
        build_branch = _bootstrap_execute_command('git rev-parse --abbrev-ref HEAD')

        date = datetime.datetime.now()

        build_version_major = date.year - 2000
        build_version_minor = date.month
        build_version_release = date.timetuple().tm_yday
        build_version_build = math.floor((date - datetime.datetime(year = 2000, day = 1, month = 1)).total_seconds() / (60 * 15))
        build_timestamp = date.strftime("!%Y-%m-%dT%H:%M:%SZ")
        build_uuid = hashlib.sha256(b'graphyte').hexdigest()[0:32]

        file.write('#define GRAPHYTE_BUILD_OS_VERSION        "{}"\n'.format(os_version))
        file.write('#define GRAPHYTE_BUILD_OS_HOST           "{}"\n'.format(os_host))
        file.write('#define GRAPHYTE_BUILD_COMMIT            "{}"\n'.format(build_commit[0] or "<unknown>"))
        file.write('#define GRAPHYTE_BUILD_COMMIT_SHORT      "{}"\n'.format(build_commit_short[0] or "<unknown>"))
        file.write('#define GRAPHYTE_BUILD_BRANCH            "{}"\n'.format(build_branch[0] or "<unknown>"))
        file.write('#define GRAPHYTE_BUILD_UUID              "{}"\n'.format(build_uuid))
        file.write('#define GRAPHYTE_BUILD_VERSION           "{}.{}.{}.{}"\n'.format(
            build_version_major,
            build_version_minor,
            build_version_release,
            build_version_build
        ))

        file.write('#define GRAPHYTE_BUILD_VERSION_MAJOR     {}\n'.format(build_version_major))
        file.write('#define GRAPHYTE_BUILD_VERSION_MINOR     {}\n'.format(build_version_minor))
        file.write('#define GRAPHYTE_BUILD_VERSION_RELEASE   {}\n'.format(build_version_release))
        file.write('#define GRAPHYTE_BUILD_VERSION_BUILD     {}\n'.format(build_version_build))
        file.write('#define GRAPHYTE_BUILD_TIMESTAMP         "{}"\n'.format(build_timestamp))

if __name__ == "__main__":
    generate_version_file()

    if is_win:
        generate_msvc_compiler_info()
