import subprocess
import os
import platform
import datetime
import math
import uuid
import hashlib

def output_of(commandline):
    try:
        return subprocess.run(commandline, stdout=subprocess.PIPE).stdout.decode('utf8').splitlines()
    except:
        return None

def get_latest_vs_path():
    return output_of([
        "C:\\Program Files (x86)\\Microsoft Visual Studio\\Installer\\vswhere",
        "-latest",
        "-property", "installationPath"
    ])

def emit_header(file):
    file.write("// This file was generated by 'bootstrap.py'\n")

def emit_compiler_msvc():
    with open('scripts/compiler.msvc.bff', 'w') as file:
        emit_header(file)

        try:
            base_path = get_latest_vs_path()[0]
            file.write(".ToolsetMsvcRoot = '{}'\n".format(base_path))
        except:
            file.write(".ToolsetMsvcRoot = 'Unknown Location'")




def emit_version():
    with open('engine/include/Graphyte/Build.Version.hxx', 'w') as file:
        os_version = platform.win32_ver()[1]
        os_host = platform.system()

        build_commit = output_of('git log -1 --format=%H')
        build_commit_short = output_of('git log -1 --format=%h')
        build_branch = output_of('git rev-parse --abbrev-ref HEAD')

        date = datetime.datetime.now()

        build_version_major = date.year - 2000
        build_version_minor = date.month
        build_version_release = date.timetuple().tm_yday
        build_version_build = math.floor((date - datetime.datetime(year = 2000, day = 1, month = 1)).total_seconds() / (60 * 15))
        build_timestamp = date.strftime("!%Y-%m-%dT%H:%M:%SZ")
        build_uuid = hashlib.sha256(b'graphyte').hexdigest()[0:32]

        file.write('#define GRAPHYTE_BUILD_OS_VERSION        "{}"\n'.format(os_version))
        file.write('#define GRAPHYTE_BUILD_OS_HOST           "{}"\n'.format(os_host))
        file.write('#define GRAPHYTE_BUILD_COMMIT            "{}"\n'.format(build_commit[0] or "<unknown>"))
        file.write('#define GRAPHYTE_BUILD_COMMIT_SHORT      "{}"\n'.format(build_commit_short[0] or "<unknown>"))
        file.write('#define GRAPHYTE_BUILD_BRANCH            "{}"\n'.format(build_branch[0] or "<unknown>"))
        file.write('#define GRAPHYTE_BUILD_UUID              "{}"\n'.format(build_uuid))
        file.write('#define GRAPHYTE_BUILD_VERSION           "{}.{}.{}.{}"\n'.format(
            build_version_major,
            build_version_minor,
            build_version_release,
            build_version_build
        ))

        file.write('#define GRAPHYTE_BUILD_VERSION_MAJOR     {}\n'.format(build_version_major))
        file.write('#define GRAPHYTE_BUILD_VERSION_MINOR     {}\n'.format(build_version_minor))
        file.write('#define GRAPHYTE_BUILD_VERSION_RELEASE   {}\n'.format(build_version_release))
        file.write('#define GRAPHYTE_BUILD_VERSION_BUILD     {}\n'.format(build_version_build))
        file.write('#define GRAPHYTE_BUILD_TIMESTAMP         "{}"\n'.format(build_timestamp))

        print(platform.architecture())
        print(platform.machine())
        print(platform.node())
        print(platform.platform())
        print(platform.processor())
        print(platform.python_build())
        print(platform.python_compiler())
        print(platform.python_branch())
        print(platform.python_implementation())
        print(platform.python_revision())
        print(platform.python_version())
        print(platform.python_version_tuple())
        print(platform.release())
        print()
        print(platform.version())
        print(platform.uname())

if __name__ == "__main__":
    emit_version()
    emit_compiler_msvc()
