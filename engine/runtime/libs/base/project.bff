{
    .ProjectName = 'com.graphyte.base'
    .ProjectPath = 'engine/runtime/libs/base'
    {
        .UnityInputPath = '$ProjectPath$'
        .UnityInputPattern = { '*.cxx' }
        .UnityOutputPath = '$OutputBase$/unity/$ProjectPath$'
        .UnityOutputPattern = '$ProjectName$-unity-*.cxx'

        Unity('$ProjectName$-Unity-Windows') {
            .UnityInputExcludePattern = {
                '*Linux.*.cxx'
                '*Posix.*.cxx'
                '*Android.*.cxx'
            }
        }
        Unity('$ProjectName$-Unity-Linux') {
            .UnityInputExcludePattern = {
                '*Windows.*.cxx'
                '*Android.*.cxx'
            }
        }
        Unity('$ProjectName$-Unity-Android') {
            .UnityInputExcludePattern = {
                '*Windows.*.cxx'
                '*Linux.*.cxx'
            }
        }
    }

    .VcxProjectConfigs = {}

    // this module applies only on windows-x64-msvc build
    .CurrentConfigs = .Configs_Windows_x64_MSVC + .Configs_Windows_ARMv8_MSVC
    ForEach(.Config in .CurrentConfigs)
    {
        Using(.Config)
        .LocalConfigName = '$PlatformInfo$-$ArchitectureInfo$-$CompilerInfo$-$Config$'
        .LocalConfigVarName = '$PlatformInfo$_$ArchitectureInfo$_$CompilerInfo$_$Config$'
        .LocalTargetName = '$ProjectName$-$LocalConfigName$'

        ObjectList('$ProjectName$-Lib-$LocalConfigName$')
        {
            .CompilerInputUnity = '$ProjectName$-Unity-Windows'
            .CompilerOutputPath = '$OutputBase$/obj/$LocalTargetName$/'

            // Common Graphyte module include paths
            .CompilerOptions
                + ' /I"$ProjectPath$/private"'
                + ' /I"$ProjectPath$/public"'
                + ' /I"sdks/fmt/include"'
                + ' /I"sdks/lz4/include"'
                + ' /I"engine/include"'
                + ' /D_WINDLL'
                + ' /Dmodule_base_EXPORTS=1'
        }

        DLL('$LocalTargetName$') {
            .LinkerOutput = '$OutputBase$/bin/$LocalConfigName$/$ProjectName$.dll'
            .Libraries = {
                'sdk.fmt-$LocalConfigName$'
                'sdk.lz4-$LocalConfigName$'
                '$ProjectName$-Lib-$LocalConfigName$'
            }
            .LinkerOptions
                + ' /DLL'
                + ' msvcprt.lib'
                + ' ntdll.lib'
                + ' comctl32.lib'
                + ' dbghelp.lib'
                + ' iphlpapi.lib'
                + ' ws2_32.lib'
                + ' dwmapi.lib'
                + ' xinput.lib'
                + ' xaudio2.lib'
                + ' advapi32.lib'
                + ' gdi32.lib'
                + ' shell32.lib'
                + ' ole32.lib'
                + ' Faultrep.lib'
                + ' Bcrypt.lib'
                + ' user32.lib'
                + ' Mincore.lib'
        }

        .ProjectConfig = [
            .Target = '$ProjectName$-Lib-$LocalConfigName$'
            .Config = '$Config$'
            .Platform = '$VsPlatform$'
            .ProjectBuildCommand = 'fbuild -ide -dist -cache -monitor $LocalTargetName$'
            .ProjectRebuildCommand = 'fbuild -ide -clean -dist -cache -monitor $LocalTargetName$'
            .ProjectCleanCommand = 'fbuild -ide $LocalTargetName$-Clean'
        ]

        ^'SolutionConfigs_$LocalConfigVarName$' + '$LocalTargetName$'
        ^VcxProjectConfigs + .ProjectConfig

        ^'AllTargets_$LocalConfigVarName$' + '$LocalTargetName$'
    }

    VCXProject('$ProjectName$') {
        .ProjectOutput = '$ProjectName$.vcxproj'
        .ProjectInputPaths = { .ProjectPath }
        //.ProjectOutputDirectory =
        //>intermediateDirectory =
        .ProjectBasePath = .ProjectPath
        .ProjectAllowedFileExtensions = {
            '*.bff'
            '*.cxx'
            '*.hxx'
            '*.c'
            '*.h'
        }
        .ProjectConfigs = .VcxProjectConfigs
        .PlatformToolset = .VsPlatformToolset
    }

    ^GraphyteProjects + .ProjectName
}
