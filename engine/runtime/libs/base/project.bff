{
    .ProjectName = 'com.graphyte.base'
    .ProjectPath = 'engine/runtime/libs/base'
    {
        .UnityInputPath = '$ProjectPath$'
        .UnityInputPattern = { '*.cxx' }
        .UnityOutputPath = '$OutputBase$/unity/$ProjectPath$'
        .UnityOutputPattern = '$ProjectName$-unity-*.cxx'

        Unity('$ProjectName$-Unity-Windows') {
            .UnityInputExcludePattern = {
                '*Linux.*.cxx'
                '*Posix.*.cxx'
                '*Android.*.cxx'
            }
        }
        Unity('$ProjectName$-Unity-Linux') {
            .UnityInputExcludePattern = {
                '*Windows.*.cxx'
                '*Android.*.cxx'
            }
        }
        Unity('$ProjectName$-Unity-Android') {
            .UnityInputExcludePattern = {
                '*Windows.*.cxx'
                '*Linux.*.cxx'
            }
        }
    }

    .VcxProjectConfigs = {}

    // this module applies only on windows-x64-msvc build
    .CurrentConfigs = .Configs_Windows_MSVC_x64 + .Configs_Windows_MSVC_ARMv8
    ForEach(.Config in .CurrentConfigs)
    {
        Using(.Config)

        ObjectList('$ProjectName$-Lib-$PlatformInfo$-$ArchitectureInfo$-$CompilerInfo$-$Config$')
        {
            .CompilerInputUnity = '$ProjectName$-Unity-Windows'
            .CompilerOutputPath = '$OutputBase$/obj/$ProjectName$-$PlatformInfo$-$ArchitectureInfo$-$CompilerInfo$-$Config$/'

            // Common Graphyte module include paths
            .CompilerOptions
                + ' /I"$ProjectPath$/private"'
                + ' /I"$ProjectPath$/public"'
                + ' /I"sdks/fmt/include"'
                + ' /I"sdks/lz4/include"'
                + ' /I"engine/include"'
                + ' /D_WINDLL'
                + ' /Dmodule_base_EXPORTS=1'
        }

        DLL('$ProjectName$-$PlatformInfo$-$ArchitectureInfo$-$CompilerInfo$-$Config$') {
            .LinkerOutput = '$OutputBase$/bin/$PlatformInfo$-$ArchitectureInfo$-$CompilerInfo$-$Config$/$ProjectName$.dll'
            .Libraries = {
                'sdk.fmt-$PlatformInfo$-$ArchitectureInfo$-$CompilerInfo$-$Config$'
                'sdk.lz4-$PlatformInfo$-$ArchitectureInfo$-$CompilerInfo$-$Config$'
                '$ProjectName$-Lib-$PlatformInfo$-$ArchitectureInfo$-$CompilerInfo$-$Config$'
            }
            .LinkerOptions
                + ' /DLL'
                + ' msvcprt.lib'
                + ' ntdll.lib'
                + ' comctl32.lib'
                + ' dbghelp.lib'
                + ' iphlpapi.lib'
                + ' ws2_32.lib'
                + ' dwmapi.lib'
                + ' xinput.lib'
                + ' xaudio2.lib'
                + ' advapi32.lib'
                + ' gdi32.lib'
                + ' shell32.lib'
                + ' ole32.lib'
                + ' Faultrep.lib'
                + ' Bcrypt.lib'
                + ' user32.lib'
                + ' Mincore.lib'
        }

        .ProjectConfig = [
            .Platform = '$PlatformInfo$-$ArchitectureInfo$-$CompilerInfo$'
            .Config = '$Config$'
            .Target = '$ProjectName$-$PlatformInfo$-$ArchitectureInfo$-$CompilerInfo$-$Config$'
        ]
        
        ^VcxProjectConfigs + .ProjectConfig
    }

    VCXProject('$ProjectName$') {
        .ProjectOutput = '$ProjectName$.vcxproj'
        .ProjectInputPaths = { .ProjectPath }
        //.ProjectOutputDirectory = 
        //>intermediateDirectory = 
        .ProjectBasePath = .ProjectPath
        .ProjectAllowedFileExtensions = {
            '*.bff'
            '*.cxx'
            '*.hxx'
            '*.c'
            '*.h'
        }
        .ProjectConfigs = .VcxProjectConfigs
        .PlatformToolset = 'v142'
        .ProjectBuildCommand = 'fbuild -ide -dist -cache -monitor ^$(ProjectName)-^$(PlatformName)-^$(Configuration)'
        .ProjectRebuildCommand = 'fbuild -ide -clean -dist -cache -monitor ^$(ProjectName)-^$(PlatformName)-^$(Configuration)'
        .ProjectCleanCommand = 'fbuild -ide ^$(ProjectName)-^$(Configuration)-Clean'
    }

    ^GraphyteProjects + .ProjectName
}
