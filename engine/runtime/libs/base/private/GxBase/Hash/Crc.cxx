#include <GxBase/Hash/Crc.hxx>
#include <GxBase/System.hxx>

namespace Graphyte::Impl
{
    static constexpr uint32_t const GCrc32Table[256] = {
        // clang-format off
        0x00000000u, 0x04C11DB7u, 0x09823B6Eu, 0x0D4326D9u, 0x130476DCu, 0x17C56B6Bu, 0x1A864DB2u, 0x1E475005u,
        0x2608EDB8u, 0x22C9F00Fu, 0x2F8AD6D6u, 0x2B4BCB61u, 0x350C9B64u, 0x31CD86D3u, 0x3C8EA00Au, 0x384FBDBDu,
        0x4C11DB70u, 0x48D0C6C7u, 0x4593E01Eu, 0x4152FDA9u, 0x5F15ADACu, 0x5BD4B01Bu, 0x569796C2u, 0x52568B75u,
        0x6A1936C8u, 0x6ED82B7Fu, 0x639B0DA6u, 0x675A1011u, 0x791D4014u, 0x7DDC5DA3u, 0x709F7B7Au, 0x745E66CDu,
        0x9823B6E0u, 0x9CE2AB57u, 0x91A18D8Eu, 0x95609039u, 0x8B27C03Cu, 0x8FE6DD8Bu, 0x82A5FB52u, 0x8664E6E5u,
        0xBE2B5B58u, 0xBAEA46EFu, 0xB7A96036u, 0xB3687D81u, 0xAD2F2D84u, 0xA9EE3033u, 0xA4AD16EAu, 0xA06C0B5Du,
        0xD4326D90u, 0xD0F37027u, 0xDDB056FEu, 0xD9714B49u, 0xC7361B4Cu, 0xC3F706FBu, 0xCEB42022u, 0xCA753D95u,
        0xF23A8028u, 0xF6FB9D9Fu, 0xFBB8BB46u, 0xFF79A6F1u, 0xE13EF6F4u, 0xE5FFEB43u, 0xE8BCCD9Au, 0xEC7DD02Du,
        0x34867077u, 0x30476DC0u, 0x3D044B19u, 0x39C556AEu, 0x278206ABu, 0x23431B1Cu, 0x2E003DC5u, 0x2AC12072u,
        0x128E9DCFu, 0x164F8078u, 0x1B0CA6A1u, 0x1FCDBB16u, 0x018AEB13u, 0x054BF6A4u, 0x0808D07Du, 0x0CC9CDCAu,
        0x7897AB07u, 0x7C56B6B0u, 0x71159069u, 0x75D48DDEu, 0x6B93DDDBu, 0x6F52C06Cu, 0x6211E6B5u, 0x66D0FB02u,
        0x5E9F46BFu, 0x5A5E5B08u, 0x571D7DD1u, 0x53DC6066u, 0x4D9B3063u, 0x495A2DD4u, 0x44190B0Du, 0x40D816BAu,
        0xACA5C697u, 0xA864DB20u, 0xA527FDF9u, 0xA1E6E04Eu, 0xBFA1B04Bu, 0xBB60ADFCu, 0xB6238B25u, 0xB2E29692u,
        0x8AAD2B2Fu, 0x8E6C3698u, 0x832F1041u, 0x87EE0DF6u, 0x99A95DF3u, 0x9D684044u, 0x902B669Du, 0x94EA7B2Au,
        0xE0B41DE7u, 0xE4750050u, 0xE9362689u, 0xEDF73B3Eu, 0xF3B06B3Bu, 0xF771768Cu, 0xFA325055u, 0xFEF34DE2u,
        0xC6BCF05Fu, 0xC27DEDE8u, 0xCF3ECB31u, 0xCBFFD686u, 0xD5B88683u, 0xD1799B34u, 0xDC3ABDEDu, 0xD8FBA05Au,
        0x690CE0EEu, 0x6DCDFD59u, 0x608EDB80u, 0x644FC637u, 0x7A089632u, 0x7EC98B85u, 0x738AAD5Cu, 0x774BB0EBu,
        0x4F040D56u, 0x4BC510E1u, 0x46863638u, 0x42472B8Fu, 0x5C007B8Au, 0x58C1663Du, 0x558240E4u, 0x51435D53u,
        0x251D3B9Eu, 0x21DC2629u, 0x2C9F00F0u, 0x285E1D47u, 0x36194D42u, 0x32D850F5u, 0x3F9B762Cu, 0x3B5A6B9Bu,
        0x0315D626u, 0x07D4CB91u, 0x0A97ED48u, 0x0E56F0FFu, 0x1011A0FAu, 0x14D0BD4Du, 0x19939B94u, 0x1D528623u,
        0xF12F560Eu, 0xF5EE4BB9u, 0xF8AD6D60u, 0xFC6C70D7u, 0xE22B20D2u, 0xE6EA3D65u, 0xEBA91BBCu, 0xEF68060Bu,
        0xD727BBB6u, 0xD3E6A601u, 0xDEA580D8u, 0xDA649D6Fu, 0xC423CD6Au, 0xC0E2D0DDu, 0xCDA1F604u, 0xC960EBB3u,
        0xBD3E8D7Eu, 0xB9FF90C9u, 0xB4BCB610u, 0xB07DABA7u, 0xAE3AFBA2u, 0xAAFBE615u, 0xA7B8C0CCu, 0xA379DD7Bu,
        0x9B3660C6u, 0x9FF77D71u, 0x92B45BA8u, 0x9675461Fu, 0x8832161Au, 0x8CF30BADu, 0x81B02D74u, 0x857130C3u,
        0x5D8A9099u, 0x594B8D2Eu, 0x5408ABF7u, 0x50C9B640u, 0x4E8EE645u, 0x4A4FFBF2u, 0x470CDD2Bu, 0x43CDC09Cu,
        0x7B827D21u, 0x7F436096u, 0x7200464Fu, 0x76C15BF8u, 0x68860BFDu, 0x6C47164Au, 0x61043093u, 0x65C52D24u,
        0x119B4BE9u, 0x155A565Eu, 0x18197087u, 0x1CD86D30u, 0x029F3D35u, 0x065E2082u, 0x0B1D065Bu, 0x0FDC1BECu,
        0x3793A651u, 0x3352BBE6u, 0x3E119D3Fu, 0x3AD08088u, 0x2497D08Du, 0x2056CD3Au, 0x2D15EBE3u, 0x29D4F654u,
        0xC5A92679u, 0xC1683BCEu, 0xCC2B1D17u, 0xC8EA00A0u, 0xD6AD50A5u, 0xD26C4D12u, 0xDF2F6BCBu, 0xDBEE767Cu,
        0xE3A1CBC1u, 0xE760D676u, 0xEA23F0AFu, 0xEEE2ED18u, 0xF0A5BD1Du, 0xF464A0AAu, 0xF9278673u, 0xFDE69BC4u,
        0x89B8FD09u, 0x8D79E0BEu, 0x803AC667u, 0x84FBDBD0u, 0x9ABC8BD5u, 0x9E7D9662u, 0x933EB0BBu, 0x97FFAD0Cu,
        0xAFB010B1u, 0xAB710D06u, 0xA6322BDFu, 0xA2F33668u, 0xBCB4666Du, 0xB8757BDAu, 0xB5365D03u, 0xB1F740B4u,
        // clang-format on
    };
}

namespace Graphyte
{
    BASE_API uint32_t Crc32(
        notstd::span<std::byte const> buffer,
        uint32_t initial,
        bool finalize) noexcept
    {
        std::uint8_t const* it  = reinterpret_cast<const std::uint8_t*>(buffer.data());
        std::uint8_t const* end = it + buffer.size();

        // TODO:
        //  Intel implements CRC32C polynomial, which is different from this implementation.
        //  AArch64 supports CRC32 polynomial, but this function does not take advantage of that.

        while (it < end)
        {
            std::size_t const index = (static_cast<std::size_t>(initial >> 24) ^ *it++) & 0xFFu;
            initial                 = Impl::GCrc32Table[index] ^ (initial << 8);
        }

        if (finalize)
        {
            initial = ~initial;
        }

        return initial;
    }
}

namespace Graphyte::Impl
{
    static constexpr uint64_t const GCrc64Table[256] = {
        // clang-format off
        0x0000000000000000u, 0x42F0E1EBA9EA3693u, 0x85E1C3D753D46D26u, 0xC711223CFA3E5BB5u,
        0x493366450E42ECDFu, 0x0BC387AEA7A8DA4Cu, 0xCCD2A5925D9681F9u, 0x8E224479F47CB76Au,
        0x9266CC8A1C85D9BEu, 0xD0962D61B56FEF2Du, 0x17870F5D4F51B498u, 0x5577EEB6E6BB820Bu,
        0xDB55AACF12C73561u, 0x99A54B24BB2D03F2u, 0x5EB4691841135847u, 0x1C4488F3E8F96ED4u,
        0x663D78FF90E185EFu, 0x24CD9914390BB37Cu, 0xE3DCBB28C335E8C9u, 0xA12C5AC36ADFDE5Au,
        0x2F0E1EBA9EA36930u, 0x6DFEFF5137495FA3u, 0xAAEFDD6DCD770416u, 0xE81F3C86649D3285u,
        0xF45BB4758C645C51u, 0xB6AB559E258E6AC2u, 0x71BA77A2DFB03177u, 0x334A9649765A07E4u,
        0xBD68D2308226B08Eu, 0xFF9833DB2BCC861Du, 0x388911E7D1F2DDA8u, 0x7A79F00C7818EB3Bu,
        0xCC7AF1FF21C30BDEu, 0x8E8A101488293D4Du, 0x499B3228721766F8u, 0x0B6BD3C3DBFD506Bu,
        0x854997BA2F81E701u, 0xC7B97651866BD192u, 0x00A8546D7C558A27u, 0x4258B586D5BFBCB4u,
        0x5E1C3D753D46D260u, 0x1CECDC9E94ACE4F3u, 0xDBFDFEA26E92BF46u, 0x990D1F49C77889D5u,
        0x172F5B3033043EBFu, 0x55DFBADB9AEE082Cu, 0x92CE98E760D05399u, 0xD03E790CC93A650Au,
        0xAA478900B1228E31u, 0xE8B768EB18C8B8A2u, 0x2FA64AD7E2F6E317u, 0x6D56AB3C4B1CD584u,
        0xE374EF45BF6062EEu, 0xA1840EAE168A547Du, 0x66952C92ECB40FC8u, 0x2465CD79455E395Bu,
        0x3821458AADA7578Fu, 0x7AD1A461044D611Cu, 0xBDC0865DFE733AA9u, 0xFF3067B657990C3Au,
        0x711223CFA3E5BB50u, 0x33E2C2240A0F8DC3u, 0xF4F3E018F031D676u, 0xB60301F359DBE0E5u,
        0xDA050215EA6C212Fu, 0x98F5E3FE438617BCu, 0x5FE4C1C2B9B84C09u, 0x1D14202910527A9Au,
        0x93366450E42ECDF0u, 0xD1C685BB4DC4FB63u, 0x16D7A787B7FAA0D6u, 0x5427466C1E109645u,
        0x4863CE9FF6E9F891u, 0x0A932F745F03CE02u, 0xCD820D48A53D95B7u, 0x8F72ECA30CD7A324u,
        0x0150A8DAF8AB144Eu, 0x43A04931514122DDu, 0x84B16B0DAB7F7968u, 0xC6418AE602954FFBu,
        0xBC387AEA7A8DA4C0u, 0xFEC89B01D3679253u, 0x39D9B93D2959C9E6u, 0x7B2958D680B3FF75u,
        0xF50B1CAF74CF481Fu, 0xB7FBFD44DD257E8Cu, 0x70EADF78271B2539u, 0x321A3E938EF113AAu,
        0x2E5EB66066087D7Eu, 0x6CAE578BCFE24BEDu, 0xABBF75B735DC1058u, 0xE94F945C9C3626CBu,
        0x676DD025684A91A1u, 0x259D31CEC1A0A732u, 0xE28C13F23B9EFC87u, 0xA07CF2199274CA14u,
        0x167FF3EACBAF2AF1u, 0x548F120162451C62u, 0x939E303D987B47D7u, 0xD16ED1D631917144u,
        0x5F4C95AFC5EDC62Eu, 0x1DBC74446C07F0BDu, 0xDAAD56789639AB08u, 0x985DB7933FD39D9Bu,
        0x84193F60D72AF34Fu, 0xC6E9DE8B7EC0C5DCu, 0x01F8FCB784FE9E69u, 0x43081D5C2D14A8FAu,
        0xCD2A5925D9681F90u, 0x8FDAB8CE70822903u, 0x48CB9AF28ABC72B6u, 0x0A3B7B1923564425u,
        0x70428B155B4EAF1Eu, 0x32B26AFEF2A4998Du, 0xF5A348C2089AC238u, 0xB753A929A170F4ABu,
        0x3971ED50550C43C1u, 0x7B810CBBFCE67552u, 0xBC902E8706D82EE7u, 0xFE60CF6CAF321874u,
        0xE224479F47CB76A0u, 0xA0D4A674EE214033u, 0x67C58448141F1B86u, 0x253565A3BDF52D15u,
        0xAB1721DA49899A7Fu, 0xE9E7C031E063ACECu, 0x2EF6E20D1A5DF759u, 0x6C0603E6B3B7C1CAu,
        0xF6FAE5C07D3274CDu, 0xB40A042BD4D8425Eu, 0x731B26172EE619EBu, 0x31EBC7FC870C2F78u,
        0xBFC9838573709812u, 0xFD39626EDA9AAE81u, 0x3A28405220A4F534u, 0x78D8A1B9894EC3A7u,
        0x649C294A61B7AD73u, 0x266CC8A1C85D9BE0u, 0xE17DEA9D3263C055u, 0xA38D0B769B89F6C6u,
        0x2DAF4F0F6FF541ACu, 0x6F5FAEE4C61F773Fu, 0xA84E8CD83C212C8Au, 0xEABE6D3395CB1A19u,
        0x90C79D3FEDD3F122u, 0xD2377CD44439C7B1u, 0x15265EE8BE079C04u, 0x57D6BF0317EDAA97u,
        0xD9F4FB7AE3911DFDu, 0x9B041A914A7B2B6Eu, 0x5C1538ADB04570DBu, 0x1EE5D94619AF4648u,
        0x02A151B5F156289Cu, 0x4051B05E58BC1E0Fu, 0x87409262A28245BAu, 0xC5B073890B687329u,
        0x4B9237F0FF14C443u, 0x0962D61B56FEF2D0u, 0xCE73F427ACC0A965u, 0x8C8315CC052A9FF6u,
        0x3A80143F5CF17F13u, 0x7870F5D4F51B4980u, 0xBF61D7E80F251235u, 0xFD913603A6CF24A6u,
        0x73B3727A52B393CCu, 0x31439391FB59A55Fu, 0xF652B1AD0167FEEAu, 0xB4A25046A88DC879u,
        0xA8E6D8B54074A6ADu, 0xEA16395EE99E903Eu, 0x2D071B6213A0CB8Bu, 0x6FF7FA89BA4AFD18u,
        0xE1D5BEF04E364A72u, 0xA3255F1BE7DC7CE1u, 0x64347D271DE22754u, 0x26C49CCCB40811C7u,
        0x5CBD6CC0CC10FAFCu, 0x1E4D8D2B65FACC6Fu, 0xD95CAF179FC497DAu, 0x9BAC4EFC362EA149u,
        0x158E0A85C2521623u, 0x577EEB6E6BB820B0u, 0x906FC95291867B05u, 0xD29F28B9386C4D96u,
        0xCEDBA04AD0952342u, 0x8C2B41A1797F15D1u, 0x4B3A639D83414E64u, 0x09CA82762AAB78F7u,
        0x87E8C60FDED7CF9Du, 0xC51827E4773DF90Eu, 0x020905D88D03A2BBu, 0x40F9E43324E99428u,
        0x2CFFE7D5975E55E2u, 0x6E0F063E3EB46371u, 0xA91E2402C48A38C4u, 0xEBEEC5E96D600E57u,
        0x65CC8190991CB93Du, 0x273C607B30F68FAEu, 0xE02D4247CAC8D41Bu, 0xA2DDA3AC6322E288u,
        0xBE992B5F8BDB8C5Cu, 0xFC69CAB42231BACFu, 0x3B78E888D80FE17Au, 0x7988096371E5D7E9u,
        0xF7AA4D1A85996083u, 0xB55AACF12C735610u, 0x724B8ECDD64D0DA5u, 0x30BB6F267FA73B36u,
        0x4AC29F2A07BFD00Du, 0x08327EC1AE55E69Eu, 0xCF235CFD546BBD2Bu, 0x8DD3BD16FD818BB8u,
        0x03F1F96F09FD3CD2u, 0x41011884A0170A41u, 0x86103AB85A2951F4u, 0xC4E0DB53F3C36767u,
        0xD8A453A01B3A09B3u, 0x9A54B24BB2D03F20u, 0x5D45907748EE6495u, 0x1FB5719CE1045206u,
        0x919735E51578E56Cu, 0xD367D40EBC92D3FFu, 0x1476F63246AC884Au, 0x568617D9EF46BED9u,
        0xE085162AB69D5E3Cu, 0xA275F7C11F7768AFu, 0x6564D5FDE549331Au, 0x279434164CA30589u,
        0xA9B6706FB8DFB2E3u, 0xEB46918411358470u, 0x2C57B3B8EB0BDFC5u, 0x6EA7525342E1E956u,
        0x72E3DAA0AA188782u, 0x30133B4B03F2B111u, 0xF7021977F9CCEAA4u, 0xB5F2F89C5026DC37u,
        0x3BD0BCE5A45A6B5Du, 0x79205D0E0DB05DCEu, 0xBE317F32F78E067Bu, 0xFCC19ED95E6430E8u,
        0x86B86ED5267CDBD3u, 0xC4488F3E8F96ED40u, 0x0359AD0275A8B6F5u, 0x41A94CE9DC428066u,
        0xCF8B0890283E370Cu, 0x8D7BE97B81D4019Fu, 0x4A6ACB477BEA5A2Au, 0x089A2AACD2006CB9u,
        0x14DEA25F3AF9026Du, 0x562E43B4931334FEu, 0x913F6188692D6F4Bu, 0xD3CF8063C0C759D8u,
        0x5DEDC41A34BBEEB2u, 0x1F1D25F19D51D821u, 0xD80C07CD676F8394u, 0x9AFCE626CE85B507u,
        // clang-format on
    };
}

namespace Graphyte
{
    BASE_API uint64_t Crc64(
        notstd::span<std::byte const> buffer,
        uint64_t initial,
        bool finalize) noexcept
    {
        std::uint8_t const* it  = reinterpret_cast<const std::uint8_t*>(buffer.data());
        std::uint8_t const* end = it + buffer.size();

        while (it < end)
        {
            std::size_t const index = (static_cast<std::size_t>(initial >> 56) ^ *it++) & 0xFFu;
            initial                 = Impl::GCrc64Table[index] ^ (initial << 8);
        }

        if (finalize)
        {
            initial = ~initial;
        }

        return initial;
    }
}
