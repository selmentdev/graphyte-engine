#once
#include "compilers.bff"

//--------------------------------------------------------------------------------------------------

.Configs = { }

.ConfigName_Debug   = 'Debug'
.ConfigName_Checked = 'Checked'
.ConfigName_Release = 'Release'
.ConfigName_Profile = 'Profile'


.FbBuildCommand = 'fbuild -ide -cache -monitor -fastcancel'
.FbRebuildCommand = 'fbuild -ide -clean -cache -monitor -fastcancel'
.FbCleanCommand = 'fbuild -ide -fastcancel'

//--------------------------------------------------------------------------------------------------

.BaseConfig_Windows_MSVC = [
    .PlatformInfo = 'Windows'
    .CompilerInfo = 'MSVC'
    .DefaultDefines = ''
        + ' /D_WIN32'
        + ' /D__WINDOWS__'
        + ' /D__STDC_WANT_LIB_EXT1__=1'
        + ' /D__STDINT_MACROS'
        + ' /D__STDINT_LIMITS'
        + ' /D__STDC_CONSTANT_MACROS'
        + ' /D__STDC_FORMAT_MACROS'
        + ' /D__STDC_LIMIT_MACROS'
        + ' /D_HAS_EXCEPTIONS=0'
        + ' /D_HAS_ITERATOR_DEBUGGING=0'
        + ' /D_SCL_SECURE=0'
        + ' /D_SECURE_SCL=0'
        + ' /D_CRT_SECURE_INVALID_PARAMETER='
        + ' /D_UNICODE'
        + ' /DUNICODE'
        + ' /DFMT_SHARED=1'
        + ' /DFMT_EXCEPTIONS=0'

    .CompilerOptions = ''
        + '"%1"'
        + ' /Z7'
        + ' /nologo'                // Don't display compiler logo banner
        + ' /c'                     // Compile files
        + ' /bigobj'                // Increase Number of Sections in .Obj file
        + ' /diagnostics:caret'     // Use caret (^) to indicate error location
        + ' /EHa'                   // Support asynchronous structured exception handling (SEH) with the native C++
        + ' /errorReport:send'      // Automatically sends reports of internal compiler errors to Microsoft
        //+ ' /experimental:preprocessor'     // Enable new compliant preprocessor features when available (not available in VS2019, v16.4.3)
        + ' /FC'                    // Full Path of Source Code File in Diagnostics
        + ' /fp:fast'               // ...reorder, combine, or simplify floating-point operations to optimize floating-point code for speed and space
        + ' /Gd'                    // the __cdecl calling convention for all functions except C++ member functions and functions that are marked __stdcall, __fastcall, or __vectorcall
        + ' /GF'                    // Eliminate Duplicate Strings
        + ' /GR-'                   // Enable Run-Time Type Information
        + ' /Gw'                    // Optimize Global Data
        + ' /Gy'                    // Enable Function-Level Linking
        + ' /JMC-'                  // Disable Just My Code
        + ' /permissive-'           // Enable Standards conformance
        + ' /std:c++latest'         // Specify Language Standard Version
        //+ ' /TP' // is this needed?
        //+ ' /wd4263'
        //+ ' /wd4264'
        //+ ' /wd4275'
        + ' /WX'                    // Treats all compiler warnings as errors.
        + ' /Zc:__cplusplus'        // Enable the __cplusplus macro to report the supported standard
        + ' /Zc:char8_t'            //
        + ' /Zc:externConstexpr'    // Enable extern constexpr variables
        + ' /Zc:forScope'           // Force Conformance in for Loop Scope
        + ' /Zc:inline'             // Remove unreferenced COMDAT
        + ' /Zc:referenceBinding'   // Enforce reference binding rules
        + ' /Zc:sizedDealloc'       // Enable Global Sized Deallocation Functions
        + ' /Zc:ternary'            // Enforce conditional operator rules
        + ' /Zc:throwingNew'        // Assume operator new throws
        + ' /Zc:wchar_t'            // wchar_t Is Native Type
        // /GL (Whole Program Optimization)
        + .DefaultDefines

    .PCHOptions = '' + .CompilerOptions + ' /Fp"%2" /Fo"%3"'
        + ' /Fo"%2"'
    .CompilerOptions + ' /Fo"%2"'
    .LibrarianOptions = ''
        //+ ' /NODEFAULTLIB'
        + ' /NOLOGO'
        + ' /OUT:"%2" "%1"'
    .LinkerOptions = ''
        //+ ' /NODEFAULTLIB'
        + ' /NOLOGO'
        + ' /OUT:"%2" "%1"'
        + ' /DEBUG'
        + ' /IGNORE:4001'
]

.BaseConfig_Windows_x64_MSVC = [
    Using(.Toolset_Windows_x64_MSVC)
    Using(.BaseConfig_Windows_MSVC)
    .VsPlatform = 'x64'
    .ArchitectureInfo = 'x64'
    .CompilerOptions
        + ' /arch:AVX'                          // Use AVX at minimum
    .BaseIncludePaths
        = ' /I"$ToolsetRoot$/include"'
        + ' /I"$ToolsetRoot$/atlmfc/include"'
        + ' /I"$VsToolsLocation$/VC/Auxiliary/VS/include"'
        + ' /I"$WindowsSdkLocation$\Include\$WindowsSdkVersion$\shared"'
        + ' /I"$WindowsSdkLocation$\Include\$WindowsSdkVersion$\ucrt"'
        + ' /I"$WindowsSdkLocation$\Include\$WindowsSdkVersion$\um"'
        + ' /I"$WindowsSdkLocation$\Include\$WindowsSdkVersion$\winrt"'
    .CompilerOptions + .BaseIncludePaths
    .PCHOptions      + .BaseIncludePaths
    .LinkerOptions
        + ' /MACHINE:X64'
        + ' /LIBPATH:"$ToolsetRoot$/lib/x64"'
        + ' /LIBPATH:"$WindowsSdkLocation$\Lib\$WindowsSdkVersion$\um\x64"'
        + ' /LIBPATH:"$WindowsSdkLocation$\Lib\$WindowsSdkVersion$\ucrt\x64"'
]

.BaseConfig_Windows_ARMv8_MSVC = [
    Using(.Toolset_Windows_ARMv8_MSVC)
    Using(.BaseConfig_Windows_MSVC)
    .VsPlatform = 'ARM64'
    .ArchitectureInfo = 'ARMv8'
    .CompilerOptions
        + ' /DGRAPHYTE_MATH_NO_INTRINSICS=1'    // NEON math library implementation is not ready
    .BaseIncludePaths
        = ' /I"$ToolsetRoot$/include"'
        + ' /I"$ToolsetRoot$/atlmfc/include"'
        + ' /I"$VsToolsLocation$/VC/Auxiliary/VS/include"'
        + ' /I"$WindowsSdkLocation$\Include\$WindowsSdkVersion$\shared"'
        + ' /I"$WindowsSdkLocation$\Include\$WindowsSdkVersion$\ucrt"'
        + ' /I"$WindowsSdkLocation$\Include\$WindowsSdkVersion$\um"'
        + ' /I"$WindowsSdkLocation$\Include\$WindowsSdkVersion$\winrt"'
    .CompilerOptions + .BaseIncludePaths
    .PCHOptions      + .BaseIncludePaths
    .LinkerOptions
        + ' /MACHINE:ARM64'
        + ' /LIBPATH:"$ToolsetRoot$/lib/arm64"'
        + ' /LIBPATH:"$WindowsSdkLocation$\Lib\$WindowsSdkVersion$\um\arm64"'
        + ' /LIBPATH:"$WindowsSdkLocation$\Lib\$WindowsSdkVersion$\ucrt\arm64"'
]

//--------------------------------------------------------------------------------------------------

.Config_Windows_x64_MSVC_Debug = [
    Using(.BaseConfig_Windows_x64_MSVC)
    .Config = 'Debug'
    .CompilerOptions
        + ' /DGX_CONFIG_DEBUG=1'
        + ' /MDd'                   // Use Debug DLL Run-Time Library
        + ' /Od'                    // Disable optimizations
        + ' /Ob0'                   // Disable Inline Function Expansion
        + ' /GS'                    // Enable Buffer Security Check
        + ' /sdl'                   // Enable Additional Security Checks
        + ' /RTCsu'                 // Enable Run-Time Error Checks
    .LinkerOptions
        + ' msvcprtd.lib'
]

.Config_Windows_x64_MSVC_Checked = [
    Using(.BaseConfig_Windows_x64_MSVC)
    .Config = 'Checked'
    .CompilerOptions
        + ' /DGX_CONFIG_CHECKED=1'
        + ' /MD'                    // Use Release DLL Run-Time Library
        + ' /O2'                    // Optimize for maximum speed
        + ' /Ob1'                   // Enable Inline Function Expansion
        + ' /Zo'                    // Enable Enhance Optimized Debugging
    .LinkerOptions
        + ' msvcprt.lib'
]

.Config_Windows_x64_MSVC_Profile = [
    Using(.BaseConfig_Windows_x64_MSVC)
    .Config = 'Profile'
    .CompilerOptions
        + ' /DGX_CONFIG_PROFILE=1'
        + ' /MD'                    // Use Release DLL Run-Time Library
        + ' /O2'                    // Optimize for maximum speed
        + ' /Ob2'                   // Enable Inline Function Expansion
        + ' /Oi'                    // Generate Intrinsic Functions
        + ' /Ot'                    // Favor Fast Code
        + ' /Oy-'                   // Enable Frame-Pointer Omission
        + ' /GS-'                   // Disable Buffer Security Check
    .LinkerOptions
        + ' msvcprt.lib'
]

.Config_Windows_x64_MSVC_Release = [
    Using(.BaseConfig_Windows_x64_MSVC)
    .Config = 'Release'
    .CompilerOptions
        + ' /DGX_CONFIG_RELEASE=1'
        + ' /MD'                    // Use Release DLL Run-Time Library
        + ' /O2'                    // Optimize for maximum speed
        + ' /Ob3'                   // Enable Inline Function Expansion
        + ' /Oi'                    // Generate Intrinsic Functions
        + ' /Ot'                    // Favor Fast Code
        + ' /Oy-'                   // Enable Frame-Pointer Omission
        + ' /GS-'                   // Disable Buffer Security Check
    .LinkerOptions
        + ' msvcprt.lib'
]

.Configs_Windows_x64_MSVC = {
    .Config_Windows_x64_MSVC_Debug,
    .Config_Windows_x64_MSVC_Checked,
    .Config_Windows_x64_MSVC_Profile,
    .Config_Windows_x64_MSVC_Release,
}
.Configs + .Configs_Windows_x64_MSVC

.SolutionConfigs_Windows_x64_MSVC_Debug = {}
.SolutionConfigs_Windows_x64_MSVC_Checked = {}
.SolutionConfigs_Windows_x64_MSVC_Profile = {}
.SolutionConfigs_Windows_x64_MSVC_Release = {}

.AllTargets_Windows_x64_MSVC_Debug = {}
.AllTargets_Windows_x64_MSVC_Checked = {}
.AllTargets_Windows_x64_MSVC_Profile = {}
.AllTargets_Windows_x64_MSVC_Release = {}

.AllTests_Windows_x64_MSVC_Debug = {}
.AllTests_Windows_x64_MSVC_Checked = {}
.AllTests_Windows_x64_MSVC_Profile = {}
.AllTests_Windows_x64_MSVC_Release = {}

//--------------------------------------------------------------------------------------------------

.Config_Windows_ARMv8_MSVC_Debug = [
    Using(.BaseConfig_Windows_ARMv8_MSVC)
    .Config = 'Debug'
    .CompilerOptions
        + ' /DGX_CONFIG_DEBUG=1'
        + ' /MDd'                   // Use Debug DLL Run-Time Library
        + ' /Od'                    // Disable optimizations
        + ' /Ob0'                   // Disable Inline Function Expansion
        + ' /GS'                    // Enable Buffer Security Check
        + ' /sdl'                   // Enable Additional Security Checks
        + ' /RTCsu'                 // Enable Run-Time Error Checks
    .LinkerOptions
        + ' msvcprtd.lib'
]

.Config_Windows_ARMv8_MSVC_Checked = [
    Using(.BaseConfig_Windows_ARMv8_MSVC)
    .Config = 'Checked'
    .CompilerOptions
        + ' /DGX_CONFIG_CHECKED=1'
        + ' /MD'                    // Use Release DLL Run-Time Library
        + ' /O2'                    // Optimize for maximum speed
        + ' /Ob1'                   // Enable Inline Function Expansion
        + ' /Zo'                    // Enable Enhance Optimized Debugging
    .LinkerOptions
        + ' msvcprt.lib'
]
.Config_Windows_ARMv8_MSVC_Profile = [
    Using(.BaseConfig_Windows_ARMv8_MSVC)
    .Config = 'Profile'
    .CompilerOptions
        + ' /DGX_CONFIG_PROFILE=1'
        + ' /MD'                    // Use Release DLL Run-Time Library
        + ' /O2'                    // Optimize for maximum speed
        + ' /Ob2'                   // Enable Inline Function Expansion
        + ' /Oi'                    // Generate Intrinsic Functions
        + ' /Ot'                    // Favor Fast Code
        + ' /Oy-'                   // Enable Frame-Pointer Omission
        + ' /GS-'                   // Disable Buffer Security Check
    .LinkerOptions
        + ' msvcprt.lib'
]
.Config_Windows_ARMv8_MSVC_Release = [
    Using(.BaseConfig_Windows_ARMv8_MSVC)
    .Config = 'Release'
    .CompilerOptions
        + ' /DGX_CONFIG_RELEASE=1'
        + ' /MD'                    // Use Release DLL Run-Time Library
        + ' /O2'                    // Optimize for maximum speed
        + ' /Ob3'                   // Enable Inline Function Expansion
        + ' /Oi'                    // Generate Intrinsic Functions
        + ' /Ot'                    // Favor Fast Code
        + ' /Oy-'                   // Enable Frame-Pointer Omission
        + ' /GS-'                   // Disable Buffer Security Check
    .LinkerOptions
        + ' msvcprt.lib'
]

.Configs_Windows_ARMv8_MSVC = {
    .Config_Windows_ARMv8_MSVC_Debug,
    .Config_Windows_ARMv8_MSVC_Checked,
    .Config_Windows_ARMv8_MSVC_Profile,
    .Config_Windows_ARMv8_MSVC_Release,
}
.Configs + .Configs_Windows_ARMv8_MSVC

.SolutionConfigs_Windows_ARMv8_MSVC_Debug = {}
.SolutionConfigs_Windows_ARMv8_MSVC_Checked = {}
.SolutionConfigs_Windows_ARMv8_MSVC_Profile = {}
.SolutionConfigs_Windows_ARMv8_MSVC_Release = {}

.AllTargets_Windows_ARMv8_MSVC_Debug = {}
.AllTargets_Windows_ARMv8_MSVC_Checked = {}
.AllTargets_Windows_ARMv8_MSVC_Profile = {}
.AllTargets_Windows_ARMv8_MSVC_Release = {}

.AllTests_Windows_ARMv8_MSVC_Debug = {}
.AllTests_Windows_ARMv8_MSVC_Checked = {}
.AllTests_Windows_ARMv8_MSVC_Profile = {}
.AllTests_Windows_ARMv8_MSVC_Release = {}

//--------------------------------------------------------------------------------------------------

.BaseConfig_Windows_Clang = [
]

.BaseConfig_Windows_x64_Clang = [
    Using(.BaseConfig_Windows_Clang)
    .VsPlatform = 'x64'
]

.Config_Windows_x64_Clang_Debug = [
    Using(.BaseConfig_Windows_x64_Clang)
]
.Config_Windows_x64_Clang_Checked = [
    Using(.BaseConfig_Windows_x64_Clang)
]
.Config_Windows_x64_Clang_Profile = [
    Using(.BaseConfig_Windows_x64_Clang)
]
.Config_Windows_x64_Clang_Release = [
    Using(.BaseConfig_Windows_x64_Clang)
]

.Config_Windows_x64_Clang = {
    .Config_Windows_x64_Clang_Debug,
    .Config_Windows_x64_Clang_Checked,
    .Config_Windows_x64_Clang_Profile,
    .Config_Windows_x64_Clang_Release
}
//.Configs + .Config_Windows_x64_Clang

.SolutionConfigs_Windows_x64_Clang_Debug = {}
.SolutionConfigs_Windows_x64_Clang_Checked = {}
.SolutionConfigs_Windows_x64_Clang_Profile = {}
.SolutionConfigs_Windows_x64_Clang_Release = {}

//--------------------------------------------------------------------------------------------------


//--------------------------------------------------------------------------------------------------
// Android
.BaseConfig_Android_Clang = [
    .VsPlatform = 'ARM64'
]
.BaseConfig_Android_ARMv8_Clang = [
    Using(.BaseConfig_Android_Clang)
]

.Config_Android_Clang_ARMv8_Debug = [
    Using(.BaseConfig_Android_ARMv8_Clang)
]
.Config_Android_Clang_ARMv8_Checked = [
    Using(.BaseConfig_Android_ARMv8_Clang)
]
.Config_Android_Clang_ARMv8_Profile = [
    Using(.BaseConfig_Android_ARMv8_Clang)
]
.Config_Android_Clang_ARMv8_Release = [
    Using(.BaseConfig_Android_ARMv8_Clang)
]

.Configs_Android_ARMv8_Clang = {
    .Config_Android_Clang_ARMv8_Debug,
    .Config_Android_Clang_ARMv8_Checked,
    .Config_Android_Clang_ARMv8_Profile,
    .Config_Android_Clang_ARMv8_Release,
}
//.Configs + .Configs_Android_ARMv8_Clang

.SolutionConfigs_Android_ARMv8_Clang_Debug = {}
.SolutionConfigs_Android_ARMv8_Clang_Checked = {}
.SolutionConfigs_Android_ARMv8_Clang_Profile = {}
.SolutionConfigs_Android_ARMv8_Clang_Release = {}
