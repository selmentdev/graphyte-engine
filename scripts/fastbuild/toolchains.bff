#include "../compiler.msvs.bff"
// -------------------------------------------------------------------------------------------------
// Compilers

// Windows Resource compiler
Compiler('Compiler-Windows-ResourceCompiler') {
    .Executable = '$WindowsSdkLocation$/bin/$WindowsSdkVersion$/x64/rc.exe'
    .CompilerFamily = 'custom'
}

Compiler('Compiler-Windows-x64-MSVC') {
    .Root = '$VsToolsLocation$/VC/Tools/MSVC/$VsToolsVersion$/bin/HostX64/x64'
    .Executable = '$Root$/cl.exe'
    .ExtraFiles = {
        '$Root$/1033/clui.dll'
        '$Root$/1033/mspft140ui.dll'
        '$Root$/atlprov.dll',
        '$Root$/c1.dll'
        '$Root$/c1xx.dll'
        '$Root$/c2.dll'
        '$Root$/msobj140.dll'
        '$Root$/mspdb140.dll'
        '$Root$/mspdbcore.dll'
        '$Root$/mspdbsrv.exe'
        '$Root$/mspft140.dll'
        '$Root$/msvcp140.dll'
        '$Root$/tbbmalloc.dll'
        '$Root$/vcruntime140.dll'
    }
}

Compiler('Compiler-Windows-ARMv8-MSVC') {
    .Root = '$VsToolsLocation$/VC/Tools/MSVC/$VsToolsVersion$/bin/HostX64/arm64'
    .Executable = '$Root$/cl.exe'
    .ExtraFiles = {
        '$Root$/1033/clui.dll'
        '$Root$/1033/mspft140ui.dll'
        '$Root$/atlprov.dll',
        '$Root$/c1.dll'
        '$Root$/c1xx.dll'
        '$Root$/c2.dll'
        '$Root$/msobj140.dll'
        '$Root$/mspdb140.dll'
        '$Root$/msvcdis140.dll'
        '$Root$/mspdbcore.dll'
        '$Root$/mspdbsrv.exe'
        '$Root$/mspft140.dll'
        '$Root$/msvcp140.dll'
        '$Root$/tbbmalloc.dll'
        '$Root$/vcruntime140.dll'
    }
}

Compiler('Compiler-Linux-x64-GCC') {
    .Executable = '/usr/bin/g++'
}


// -------------------------------------------------------------------------------------------------
// Platforms

.PlatformDesc_Windows = [
    .Platform_Name = 'Windows'
    .Platform_ConsoleApp_Prefix = ''
    .Platform_ConsoleApp_Suffix = '.exe'
    .Platform_WindowedApp_Prefix = ''
    .Platform_WindowedApp_Suffix = '.exe'
    .Platform_StaticLib_Prefix = 'lib'
    .Platform_StaticLib_Suffix = '.lib'
    .Platform_SharedLib_Prefix = 'lib'
    .Platform_SharedLib_Suffix = '.dll'
    
    .VcxProjectPatternToExclude = {
        '*/Impl.Linux/*'
        '*/Impl.Android/*'
        '*/Impl.Posix/*'
    }
]

.PlatformDesc_Linux = [
    .Platform_Name = 'Linux'
    .Platform_ConsoleApp_Prefix = ''
    .Platform_ConsoleApp_Suffix = '.elf'
    .Platform_WindowedApp_Prefix = ''
    .Platform_WindowedApp_Suffix = '.elf'
    .Platform_StaticLib_Prefix = 'lib'
    .Platform_StaticLib_Suffix = '.a'
    .Platform_SharedLib_Prefix = 'lib'
    .Platform_SharedLib_Suffix = '.so'
    
    .VcxProjectPatternToExclude = {
        '*/Impl.Android/*'
        '*/Impl.Windows/*'
    }
]

.PlatformDesc_Android = [
    .Platform_Name = 'Android'
    .Platform_ConsoleApp_Prefix = ''
    .Platform_ConsoleApp_Suffix = '.elf'
    .Platform_WindowedApp_Prefix = ''
    .Platform_WindowedApp_Suffix = '.elf'
    .Platform_StaticLib_Prefix = 'lib'
    .Platform_StaticLib_Suffix = '.a'
    .Platform_SharedLib_Prefix = 'lib'
    .Platform_SharedLib_Suffix = '.so'
    
    .VcxProjectPatternToExclude = {
        '*/Impl.Linux/*'
        '*/Impl.Android/*'
        '*/Impl.Posix/*'
    }
]

// -------------------------------------------------------------------------------------------------
// Toolchains

.ToolchainDesc_Windows_MSVC = [
    .Toolchain_Name = 'MSVC'
    .Toolchain_Define_Prefix = '/D'
    .Toolchain_Define_Suffix = ''
    .Toolchain_Include_Prefix = '/I"'
    .Toolchain_Include_Suffix = '"'
    .Toolchain_Library_Prefix = '/LIBPATH:"'
    .Toolchain_Library_Suffix = '"'
    .Toolchain_Link_Prefix = ''
    .Toolchain_Link_Suffix = ''

    .DefaultDefines = ''
        + ' /D_WIN32'
        + ' /D__WINDOWS__'
        + ' /D__STDC_WANT_LIB_EXT1__=1'
        + ' /D__STDINT_MACROS'
        + ' /D__STDINT_LIMITS'
        + ' /D__STDC_CONSTANT_MACROS'
        + ' /D__STDC_FORMAT_MACROS'
        + ' /D__STDC_LIMIT_MACROS'
        + ' /D_HAS_EXCEPTIONS=0'
        + ' /D_HAS_ITERATOR_DEBUGGING=0'
        + ' /D_SCL_SECURE=0'
        + ' /D_SECURE_SCL=0'
        + ' /D_CRT_SECURE_INVALID_PARAMETER='
        + ' /D_UNICODE'
        + ' /DUNICODE'
        + ' /DFMT_SHARED=1'
        + ' /DFMT_EXCEPTIONS=0'

    .SystemIncludes
        = ' /I"$VsToolsLocation$/VC/Tools/MSVC/$VsToolsVersion$/include"'
        + ' /I"$VsToolsLocation$/VC/Tools/MSVC/$VsToolsVersion$/atlmfc/include"'
        + ' /I"$VsToolsLocation$/VC/Auxiliary/VS/include"'
        + ' /I"$WindowsSdkLocation$\Include\$WindowsSdkVersion$\shared"'
        + ' /I"$WindowsSdkLocation$\Include\$WindowsSdkVersion$\ucrt"'
        + ' /I"$WindowsSdkLocation$\Include\$WindowsSdkVersion$\um"'
        + ' /I"$WindowsSdkLocation$\Include\$WindowsSdkVersion$\winrt"'

    .CompilerOptions = ''
        + '"%1"'
        + ' /Z7'
        + ' /nologo'                // Don't display compiler logo banner
        + ' /c'                     // Compile files
        + ' /bigobj'                // Increase Number of Sections in .Obj file
        + ' /diagnostics:caret'     // Use caret (^) to indicate error location
        + ' /EHa'                   // Support asynchronous structured exception handling (SEH) with the native C++
        + ' /errorReport:send'      // Automatically sends reports of internal compiler errors to Microsoft
        //+ ' /experimental:preprocessor'     // Enable new compliant preprocessor features when available (not available in VS2019, v16.4.3)
        + ' /FC'                    // Full Path of Source Code File in Diagnostics
        + ' /fp:fast'               // ...reorder, combine, or simplify floating-point operations to optimize floating-point code for speed and space
        + ' /Gd'                    // the __cdecl calling convention for all functions except C++ member functions and functions that are marked __stdcall, __fastcall, or __vectorcall
        + ' /GF'                    // Eliminate Duplicate Strings
        + ' /GR-'                   // Enable Run-Time Type Information
        + ' /Gw'                    // Optimize Global Data
        + ' /Gy'                    // Enable Function-Level Linking
        + ' /JMC-'                  // Disable Just My Code
        + ' /permissive-'           // Enable Standards conformance
        + ' /std:c++latest'         // Specify Language Standard Version
        //+ ' /wd4263'
        //+ ' /wd4264'
        //+ ' /wd4275'
        + ' /WX'                    // Treats all compiler warnings as errors.
        + ' /Zc:__cplusplus'        // Enable the __cplusplus macro to report the supported standard
        + ' /Zc:char8_t'            //
        + ' /Zc:externConstexpr'    // Enable extern constexpr variables
        + ' /Zc:forScope'           // Force Conformance in for Loop Scope
        + ' /Zc:inline'             // Remove unreferenced COMDAT
        + ' /Zc:referenceBinding'   // Enforce reference binding rules
        + ' /Zc:sizedDealloc'       // Enable Global Sized Deallocation Functions
        + ' /Zc:ternary'            // Enforce conditional operator rules
        + ' /Zc:throwingNew'        // Assume operator new throws
        + ' /Zc:wchar_t'            // wchar_t Is Native Type
        // /GL (Whole Program Optimization)
        + .SystemIncludes
        + .DefaultDefines
        + ' /Fo"%2"'

    .LibrarianOptions = ''
        //+ ' /NODEFAULTLIB'
        + ' /NOLOGO'
        + ' /OUT:"%2" "%1"'
    .LinkerOptions = ''
        //+ ' /NODEFAULTLIB'
        + ' /NOLOGO'
        + ' /OUT:"%2" "%1"'
        + ' /DEBUG'
        + ' /IGNORE:4001'


    //
    // Kind specific toolchain options.
    //

    .Options_Kind_SharedLib = [
        .KindCompilerOptions = ' /D_WINDLL'
        .KindLinkerOptions = ' /DLL'
    ]

    .Options_Kind_StaticLib = [
        .KindCompilerOptions = ''
        .KindLinkerOptions = ''
    ]

    .Options_Kind_ConsoleApp = [
        .KindCompilerOptions = ''
        .KindLinkerOptions = ' /SUBSYSTEM:CONSOLE'
    ]

    .Options_Kind_WindowedApp = [
        .KindCompilerOptions = ''
        .KindLinkerOptions = ' /SUBSYSTEM:WINDOWS'
    ]


    //
    // Configuration specific toolchain options.
    //

    .Options_Config_Debug = [
        .ConfigCompilerOptions
            = ' /DGX_CONFIG_DEBUG=1'
            + ' /MDd'                   // Use Debug DLL Run-Time Library
            + ' /Od'                    // Disable optimizations
            + ' /Ob0'                   // Disable Inline Function Expansion
            + ' /GS'                    // Enable Buffer Security Check
            + ' /sdl'                   // Enable Additional Security Checks
            + ' /RTCsu'                 // Enable Run-Time Error Checks
        .ConfigLinkerOptions
            = ' msvcprtd.lib'
    ]

    .Options_Config_Checked = [
        .ConfigCompilerOptions
            = ' /DGX_CONFIG_CHECKED=1'
            + ' /MD'                    // Use Release DLL Run-Time Library
            + ' /O2'                    // Optimize for maximum speed
            + ' /Ob1'                   // Enable Inline Function Expansion
            + ' /Zo'                    // Enable Enhance Optimized Debugging
        .ConfigLinkerOptions
            = ' msvcprt.lib'
    ]

    .Options_Config_Profile = [
        .ConfigCompilerOptions
            = ' /DGX_CONFIG_PROFILE=1'
            + ' /MD'                    // Use Release DLL Run-Time Library
            + ' /O2'                    // Optimize for maximum speed
            + ' /Ob2'                   // Enable Inline Function Expansion
            + ' /Oi'                    // Generate Intrinsic Functions
            + ' /Ot'                    // Favor Fast Code
            + ' /Oy-'                   // Enable Frame-Pointer Omission
            + ' /GS-'                   // Disable Buffer Security Check
        .ConfigLinkerOptions
            = ' msvcprt.lib'
    ]

    .Options_Config_Release = [
        .ConfigCompilerOptions
            = ' /DGX_CONFIG_RELEASE=1'
            + ' /MD'                    // Use Release DLL Run-Time Library
            + ' /O2'                    // Optimize for maximum speed
            + ' /Ob3'                   // Enable Inline Function Expansion
            + ' /Oi'                    // Generate Intrinsic Functions
            + ' /Ot'                    // Favor Fast Code
            + ' /Oy-'                   // Enable Frame-Pointer Omission
            + ' /GS-'                   // Disable Buffer Security Check
        .ConfigLinkerOptions
            = ' msvcprt.lib'
    ]

    .UnitTest_CompilerOptions_Debug = [
        .RemoveCompilerOptions = {}
        .AddCompilerOptions = {}
    ]

    .UnitTest_CompilerOptions_Checked = [
        .RemoveCompilerOptions = {
            ' /Ob1'
            ' /O2'
        }
        .AddCompilerOptions = {
            ' /Ob0'
            ' /Od'
        }
    ]

    .UnitTest_CompilerOptions_Profile = [
        .RemoveCompilerOptions = {
            ' /Ob2'
            ' /O2'
        }
        .AddCompilerOptions = {
            ' /Ob0'
            ' /Od'
        }
    ]

    .UnitTest_CompilerOptions_Release = [
        .RemoveCompilerOptions = {
            ' /Ob3'
            ' /O2'
        }
        .AddCompilerOptions = {
            ' /Ob0'
            ' /Od'
        }
    ]
]

.ToolchainDesc_Windows_x64_MSVC = [
    Using(.PlatformDesc_Windows)
    Using(.ToolchainDesc_Windows_MSVC)

    .Toolchain_Architecture = 'x64'
    .Toolchain_VisualStudio_Architecture = 'x64'


    //
    // Compilers
    //

    .Compiler = 'Compiler-Windows-x64-MSVC'
    .ResCompiler = 'Compiler-Windows-ResourceCompiler'
    .Linker = '$VsToolsLocation$/VC/Tools/MSVC/$VsToolsVersion$/bin/HostX64/x64/link.exe'
    .Librarian = '$VsToolsLocation$/VC/Tools/MSVC/$VsToolsVersion$/bin/HostX64/x64/lib.exe'


    // Additional compiler and linker options
    .CompilerOptions
        + ' /arch:AVX'
        + ' /D__AVX__'

    .LinkerOptions
        + ' /MACHINE:X64'
        + ' /LIBPATH:"$VsToolsLocation$/VC/Tools/MSVC/$VsToolsVersion$/lib/x64"'
        + ' /LIBPATH:"$WindowsSdkLocation$\Lib\$WindowsSdkVersion$\um\x64"'
        + ' /LIBPATH:"$WindowsSdkLocation$\Lib\$WindowsSdkVersion$\ucrt\x64"'
]

.ToolchainDesc_Windows_ARMv8_MSVC = [
    Using(.PlatformDesc_Windows)
    Using(.ToolchainDesc_Windows_MSVC)

    .Toolchain_Architecture = 'ARMv8'
    .Toolchain_VisualStudio_Architecture = 'ARM64'


    //
    // Compilers
    //

    .Compiler = 'Compiler-Windows-ARMv8-MSVC'
    .ResCompiler = 'Compiler-Windows-ResourceCompiler'
    .Linker = '$VsToolsLocation$/VC/Tools/MSVC/$VsToolsVersion$/bin/HostX64/arm64/link.exe'
    .Librarian = '$VsToolsLocation$/VC/Tools/MSVC/$VsToolsVersion$/bin/HostX64/arm64/lib.exe'

    .CompilerOptions
        + ' /DGRAPHYTE_MATH_NO_INTRINSICS=1'

    .LinkerOptions
        + ' /MACHINE:ARM64'
        + ' /LIBPATH:"$VsToolsLocation$/VC/Tools/MSVC/$VsToolsVersion$/lib/arm64"'
        + ' /LIBPATH:"$WindowsSdkLocation$\Lib\$WindowsSdkVersion$\um\arm64"'
        + ' /LIBPATH:"$WindowsSdkLocation$\Lib\$WindowsSdkVersion$\ucrt\arm64"'
]

.ToolchainDesc_GCC = [
    .Toolchain_Name = 'GCC'
    .Toolchain_Define_Prefix = '-D'
    .Toolchain_Define_Suffix = ''
    .Toolchain_Include_Prefix = '-I'
    .Toolchain_Include_Suffix = ''
    .Toolchain_Library_Prefix = '-L'
    .Toolchain_Library_Suffix = ''
    .Toolchain_Link_Prefix = '-l'
    .Toolchain_Link_Suffix = ''

    .CompilerOptions
        = ' -o "%2" "%1" -c -g'
        + ' -std=c++2a'
        + ' -fconcepts'
        + ' -fdiagnostics-color=always'

    .CompilerOptionsC
        = ' -std=c11'
        + ' -fdiagnostics-color=always'

    .LinkerOptions
        = ' -Wl,--start-group "%1" -Wl,--end-group -o "%2"'
        + ' -lc'
        + ' -lm'
        + ' -lstdc++'

    .LibrarianOptions
        = 'rcs "%2" "%1"'

    .UnitTest_CompilerOptions_Debug = [
        .RemoveCompilerOptions = {}
        .AddCompilerOptions = {}
    ]

    .UnitTest_CompilerOptions_Checked = [
        .RemoveCompilerOptions = {}
        .AddCompilerOptions = {}
    ]

    .UnitTest_CompilerOptions_Profile = [
        .RemoveCompilerOptions = {}
        .AddCompilerOptions = {}
    ]

    .UnitTest_CompilerOptions_Release = [
        .RemoveCompilerOptions = {}
        .AddCompilerOptions = {}
    ]
]

.ToolchainDesc_Linux_x64_GCC = [
    Using(.PlatformDesc_Linux)
    Using(.ToolchainDesc_GCC)

    .Toolchain_Architecture = 'x64'

    .CompilerOptions
        + ' -mavx'
        + ' -msse4.1'
        + ' -msse3'
        + ' -mssse3'
        + ' -msse2'
        + ' -m64'


    //
    // Compilers
    //

    .ToolchainName = 'Linux-x64-GCC'
    .Compiler = 'Compiler-Linux-x64-GCC'
    .Linker = '/usr/bin/g++'
    .Librarian = '/usr/bin/ar'


    //
    // Configuration specific toolchain options
    //

    .Options_Config_Debug = [
        .ConfigCompilerOptions = ' -DGX_CONFIG_DEBUG=1 -O0'
        .ConfigLinkerOptions = ''
    ]

    .Options_Config_Checked = [
        .ConfigCompilerOptions = ' -DGX_CONFIG_CHECKED=1 -O1'
        .ConfigLinkerOptions = ''
    ]

    .Options_Config_Profile = [
        .ConfigCompilerOptions = ' -DGX_CONFIG_PROFILE=1 -O2'
        .ConfigLinkerOptions = ''
    ]

    .Options_Config_Release = [
        .ConfigCompilerOptions = ' -DGX_CONFIG_RELEASE=1 -O3'
        .ConfigLinkerOptions = ''
    ]


    //
    // Kind specific toolchain options.
    //

    .Options_Kind_SharedLib = [
        .KindCompilerOptions = ' -fpic'
        .KindLinkerOptions = ' -shared'
    ]

    .Options_Kind_StaticLib = [
        .KindCompilerOptions = ' -fpic'
        .KindLinkerOptions = ' -static'
    ]

    .Options_Kind_ConsoleApp = [
        .KindCompilerOptions = ' -fpic'
        .KindLinkerOptions = ' -pie'
    ]

    .Options_Kind_WindowedApp = [
        .KindCompilerOptions = ' -fpic'
        .KindLinkerOptions = ' -pie'
    ]
]
