#include "../compiler.msvs.bff"
// -------------------------------------------------------------------------------------------------
// Compilers

// Windows Resource compiler
Compiler('Compiler-Windows-ResourceCompiler') {
    .Executable = '$WindowsSdkLocation$/bin/$WindowsSdkVersion$/x64/rc.exe'
    .CompilerFamily = 'custom'
}

Compiler('Compiler-Windows-x64-MSVC') {
    .Root = '$VsToolsLocation$/VC/Tools/MSVC/$VsToolsVersion$/bin/HostX64/x64'
    .Executable = '$Root$/cl.exe'
    .ExtraFiles = {
        '$Root$/1033/clui.dll'
        '$Root$/1033/mspft140ui.dll'
        '$Root$/atlprov.dll',
        '$Root$/c1.dll'
        '$Root$/c1xx.dll'
        '$Root$/c2.dll'
        '$Root$/msobj140.dll'
        '$Root$/mspdb140.dll'
        '$Root$/mspdbcore.dll'
        '$Root$/mspdbsrv.exe'
        '$Root$/mspft140.dll'
        '$Root$/msvcp140.dll'
        '$Root$/tbbmalloc.dll'
        '$Root$/vcruntime140.dll'
    }
}

Compiler('Compiler-Windows-ARMv8-MSVC') {
    .Root = '$VsToolsLocation$/VC/Tools/MSVC/$VsToolsVersion$/bin/HostX64/arm64'
    .Executable = '$Root$/cl.exe'
    .ExtraFiles = {
        '$Root$/1033/clui.dll'
        '$Root$/1033/mspft140ui.dll'
        '$Root$/atlprov.dll',
        '$Root$/c1.dll'
        '$Root$/c1xx.dll'
        '$Root$/c2.dll'
        '$Root$/msobj140.dll'
        '$Root$/mspdb140.dll'
        '$Root$/msvcdis140.dll'
        '$Root$/mspdbcore.dll'
        '$Root$/mspdbsrv.exe'
        '$Root$/mspft140.dll'
        '$Root$/msvcp140.dll'
        '$Root$/tbbmalloc.dll'
        '$Root$/vcruntime140.dll'
    }
}

Compiler('Compiler-Linux-x64-GCC-C++') {
    .Executable = '/usr/bin/g++'
}

Compiler('Compiler-Linux-x64-GCC-C') {
    .Executable = '/usr/bin/gcc'
}

Compiler('Compiler-Windows-x64-LLVM-Clang') {
    .Root = '$WindowsLlvmPath$/bin'
    .Executable = '$Root$/clang++.exe'
}

Compiler('Compiler-Windows-x64-LLVM-ClangCL') {
    .Root = '$WindowsLlvmPath$/bin'
    .Executable = '$Root$/clang-cl.exe'
}

// -------------------------------------------------------------------------------------------------
// Platform definitions

.GxPlatformDef_Windows = [
    .Prefix_ConsoleApp = ''
    .Suffix_ConsoleApp = '.exe'
    .Prefix_WindowedApp = ''
    .Suffix_WindowedApp = '.exe'
    .Prefix_StaticLib = 'lib'
    .Suffix_StaticLib = '.lib'
    .Prefix_SharedLib = 'lib'
    .Suffix_SharedLib = '.dll'

    .UnityInputExcludePattern = {
        '*Linux.*.cxx'
        '*Android.*.cxx'
        '*Posix.*.cxx'
        '*UWP.*.cxx'
    }

    .ProjectPatternToExclude = {
        '*/Impl.Linux/*'
        '*/Impl.Android/*'
        '*/Impl.Posix/*'
        '*/Impl.UWP/*'
    }

    .PlatformDefines = {
        '_WIN32'
        '_WIN32_WINNT=0x0A00'
        'WINAPI_FAMILY=WINAPI_FAMILY_DESKTOP_APP'
        'GRAPHYTE_WINDOWS_SDK_BUILD_VERSION=$WindowsSdkBuildVersion$'
        '__WINDOWS__'
        '__STDC_WANT_LIB_EXT1__=1'
        '__STDINT_MACROS'
        '__STDINT_LIMITS'
        '__STDC_CONSTANT_MACROS'
        '__STDC_FORMAT_MACROS'
        '__STDC_LIMIT_MACROS'
        '_UNICODE'
        'UNICODE'
        'FMT_SHARED=1'
        'FMT_EXCEPTIONS=0'
    }

    .PlatformIncludes = {
        '$WindowsSdkLocation$\Include\$WindowsSdkVersion$\shared'
        '$WindowsSdkLocation$\Include\$WindowsSdkVersion$\ucrt'
        '$WindowsSdkLocation$\Include\$WindowsSdkVersion$\um'
        '$WindowsSdkLocation$\Include\$WindowsSdkVersion$\winrt'
        '$WindowsSdkLocation$\Include\$WindowsSdkVersion$\cppwinrt'
    }
]

.GxPlatformDef_UWP = [
    .Prefix_ConsoleApp = ''
    .Suffix_ConsoleApp = '.exe'
    .Prefix_WindowedApp = ''
    .Suffix_WindowedApp = '.exe'
    .Prefix_StaticLib = 'lib'
    .Suffix_StaticLib = '.lib'
    .Prefix_SharedLib = 'lib'
    .Suffix_SharedLib = '.dll'

    .UnityInputExcludePattern = {
        '*Linux.*.cxx'
        '*Android.*.cxx'
        '*Posix.*.cxx'
        '*Windows.*.cxx'
    }

    .ProjectPatternToExclude = {
        '*/Impl.Linux/*'
        '*/Impl.Android/*'
        '*/Impl.Posix/*'
        '*/Impl.Windows/*'
    }

    .PlatformDefines = {
        '_WIN32'
        '_WIN32_WINNT=0x0A00'
        'WINAPI_FAMILY=WINAPI_FAMILY_PC_APP'
        'GRAPHYTE_WINDOWS_SDK_BUILD_VERSION=$WindowsSdkBuildVersion$'
        '__WINDOWS__'
        '__STDC_WANT_LIB_EXT1__=1'
        '__STDINT_MACROS'
        '__STDINT_LIMITS'
        '__STDC_CONSTANT_MACROS'
        '__STDC_FORMAT_MACROS'
        '__STDC_LIMIT_MACROS'
        '_UNICODE'
        'UNICODE'
        'FMT_SHARED=1'
        'FMT_EXCEPTIONS=0'
    }
    .PlatformIncludes = {
        '$WindowsSdkLocation$\Include\$WindowsSdkVersion$\shared'
        '$WindowsSdkLocation$\Include\$WindowsSdkVersion$\ucrt'
        '$WindowsSdkLocation$\Include\$WindowsSdkVersion$\um'
        '$WindowsSdkLocation$\Include\$WindowsSdkVersion$\winrt'
        '$WindowsSdkLocation$\Include\$WindowsSdkVersion$\cppwinrt'
    }
]

.GxPlatformDef_Linux = [
    .Prefix_ConsoleApp = ''
    .Suffix_ConsoleApp = '.elf'
    .Prefix_WindowedApp = ''
    .Suffix_WindowedApp = '.elf'
    .Prefix_StaticLib = 'lib'
    .Suffix_StaticLib = '.a'
    .Prefix_SharedLib = 'lib'
    .Suffix_SharedLib = '.so'

    .UnityInputExcludePattern = {
        '*Android.*.cxx'
        '*Windows.*.cxx'
        '*UWP.*.cxx'
    }

    .ProjectPatternToExclude = {
        '*/Impl.Android/*'
        '*/Impl.Windows/*'
        '*/Impl.UWP/*'
    }

    .PlatformDefines = {
    }
    .PlatformIncludes = {
    }
]

.GxPlatformDef_Android = [
    .Prefix_ConsoleApp = ''
    .Suffix_ConsoleApp = '.elf'
    .Prefix_WindowedApp = ''
    .Suffix_WindowedApp = '.elf'
    .Prefix_StaticLib = 'lib'
    .Suffix_StaticLib = '.a'
    .Prefix_SharedLib = 'lib'
    .Suffix_SharedLib = '.so'

    .UnityInputExcludePattern = {
        '*Linux.*.cxx'
        '*Windows.*.cxx'
        '*UWP.*.cxx'
    }

    .ProjectPatternToExclude = {
        '*/Impl.Linux/*'
        '*/Impl.Windows/*'
        '*/Impl.UWP/*'
    }

    .PlatformDefines = {
    }
    .PlatformIncludes = {
    }
]

// -------------------------------------------------------------------------------------------------
// Toolchains

.GxToolchainDef_Compiler_MSVC = [
    .Prefix_Define = '/D'
    .Suffix_Define = ''
    .Prefix_Include = '/I"'
    .Suffix_Include = '"'
    .Prefix_LibPath = '/LIBPATH:"'
    .Suffix_LibPath = '"'
    .Prefix_Link = ''
    .Suffix_Link = ''

    .ToolchainDefines = {
        '_HAS_EXCEPTIONS=0'
        '_HAS_ITERATOR_DEBUGGING=0'
        '_SCL_SECURE=0'
        '_SECURE_SCL=0'
        '_CRT_SECURE_INVALID_PARAMETER='
    }

    .ToolchainIncludes = {
        '$VsToolsLocation$/VC/Tools/MSVC/$VsToolsVersion$/include'
        '$VsToolsLocation$/VC/Tools/MSVC/$VsToolsVersion$/atlmfc/include'
        '$VsToolsLocation$/VC/Auxiliary/VS/include'
    }

    .CompilerOptionsCXX_Before
        = '"%1"'
        + ' /Z7'
        + ' /nologo'                // Don't display compiler logo banner
        + ' /c'                     // Compile files
        + ' /bigobj'                // Increase Number of Sections in .Obj file
        + ' /diagnostics:caret'     // Use caret (^) to indicate error location
        + ' /EHa'                   // Support asynchronous structured exception handling (SEH) with the native C++
        + ' /errorReport:send'      // Automatically sends reports of internal compiler errors to Microsoft
        //+ ' /experimental:preprocessor'     // Enable new compliant preprocessor features when available (not available in VS2019, v16.4.3)
        + ' /FC'                    // Full Path of Source Code File in Diagnostics
        + ' /fp:fast'               // ...reorder, combine, or simplify floating-point operations to optimize floating-point code for speed and space
        + ' /Gd'                    // the __cdecl calling convention for all functions except C++ member functions and functions that are marked __stdcall, __fastcall, or __vectorcall
        + ' /GF'                    // Eliminate Duplicate Strings
        + ' /GR-'                   // Enable Run-Time Type Information
        + ' /Gw'                    // Optimize Global Data
        + ' /Gy'                    // Enable Function-Level Linking
        + ' /JMC-'                  // Disable Just My Code
        + ' /permissive-'           // Enable Standards conformance
        + ' /std:c++latest'         // Specify Language Standard Version
        //+ ' /wd4263'
        //+ ' /wd4264'
        //+ ' /wd4275'
        + ' /WX'                    // Treats all compiler warnings as errors.
        + ' /Zc:__cplusplus'        // Enable the __cplusplus macro to report the supported standard
        + ' /Zc:char8_t'            //
        + ' /Zc:externConstexpr'    // Enable extern constexpr variables
        + ' /Zc:forScope'           // Force Conformance in for Loop Scope
        + ' /Zc:inline'             // Remove unreferenced COMDAT
        + ' /Zc:referenceBinding'   // Enforce reference binding rules
        + ' /Zc:sizedDealloc'       // Enable Global Sized Deallocation Functions
        + ' /Zc:ternary'            // Enforce conditional operator rules
        + ' /Zc:throwingNew'        // Assume operator new throws
        + ' /Zc:wchar_t'            // wchar_t Is Native Type
        // /GL (Whole Program Optimization)
    .CompilerOptionsCC_Before = .CompilerOptionsCXX_Before
    .CompilerOptions_After
        = ' /Fo"%2"'
        
    .LibrarianOptions_Before
        = ' /NOLOGO'

    .LibrarianOptions_After
        = ' /OUT:"%2" "%1"'

    .LinkerOptions_Before
        = ' /NOLOGO'
        + ' /DEBUG'
        + ' /IGNORE:4001'

    .LinkerOptions_After
        = ' /OUT:"%2" "%1"'

    .CompilerOptions_Kind_SharedLib = ' /D_WINDLL'
    .LinkerOptions_Kind_SharedLib = ' /DLL'

    .CompilerOptions_Kind_StaticLib = ''
    .LinkerOptions_Kind_StaticLib = ''

    .CompilerOptions_Kind_ConsoleApp = ''
    .LinkerOptions_Kind_ConsoleApp = ' /SUBSYSTEM:CONSOLE'

    .CompilerOptions_Kind_WindowedApp = ''
    .LinkerOptions_Kind_WindowedApp = ' /SUBSYSTEM:WINDOWS'
]

.GxToolchainDef_Compiler_MSVC_Config_Debug = [
    .CompilerOptions_Config
        = ' /DGX_CONFIG_DEBUG=1'
        + ' /MDd'                   // Use Debug DLL Run-Time Library
        + ' /Od'                    // Disable optimizations
        + ' /Ob0'                   // Disable Inline Function Expansion
        + ' /GS'                    // Enable Buffer Security Check
        + ' /sdl'                   // Enable Additional Security Checks
        + ' /RTCsu'                 // Enable Run-Time Error Checks
    .LinkerOptions_Config
        = ' msvcprtd.lib'
]

.GxToolchainDef_Compiler_MSVC_Config_Checked = [
    .CompilerOptions_Config
        = ' /DGX_CONFIG_CHECKED=1'
        + ' /MD'                    // Use Release DLL Run-Time Library
        + ' /O2'                    // Optimize for maximum speed
        + ' /Ob1'                   // Enable Inline Function Expansion
        + ' /Zo'                    // Enable Enhance Optimized Debugging
    .LinkerOptions_Config
        = ' msvcprt.lib'
]
    
.GxToolchainDef_Compiler_MSVC_Config_Profile = [
    .CompilerOptions_Config
        = ' /DGX_CONFIG_PROFILE=1'
        + ' /MD'                    // Use Release DLL Run-Time Library
        + ' /O2'                    // Optimize for maximum speed
        + ' /Ob2'                   // Enable Inline Function Expansion
        + ' /Oi'                    // Generate Intrinsic Functions
        + ' /Ot'                    // Favor Fast Code
        + ' /Oy-'                   // Enable Frame-Pointer Omission
        + ' /GS-'                   // Disable Buffer Security Check
    .LinkerOptions_Config
        = ' msvcprt.lib'
]
    
.GxToolchainDef_Compiler_MSVC_Config_Release = [
    .CompilerOptions_Config
        = ' /DGX_CONFIG_RELEASE=1'
        + ' /MD'                    // Use Release DLL Run-Time Library
        + ' /O2'                    // Optimize for maximum speed
        + ' /Ob3'                   // Enable Inline Function Expansion
        + ' /Oi'                    // Generate Intrinsic Functions
        + ' /Ot'                    // Favor Fast Code
        + ' /Oy-'                   // Enable Frame-Pointer Omission
        + ' /GS-'                   // Disable Buffer Security Check
    .LinkerOptions_Config
        = ' msvcprt.lib'
]

.GxToolchainDef_Compiler_MSVC_UnitTest_Debug = [
    .CompilerOptions_UnitTest_Remove = {}
    .CompilerOptions_UnitTest_Add = {}
]
.GxToolchainDef_Compiler_MSVC_UnitTest_Checked = [
    .CompilerOptions_UnitTest_Remove = { ' /Ob1', ' /O2' }
    .CompilerOptions_UnitTest_Add = { ' /Ob0', ' /Od' }
]
.GxToolchainDef_Compiler_MSVC_UnitTest_Profile = [
    .CompilerOptions_UnitTest_Remove = { ' /Ob2', ' /O2' }
    .CompilerOptions_UnitTest_Add = { ' /Ob0', ' /Od' }
]
.GxToolchainDef_Compiler_MSVC_UnitTest_Release = [
    .CompilerOptions_UnitTest_Remove = { ' /Ob3', ' /O2' }
    .CompilerOptions_UnitTest_Add = { ' /Ob0', ' /Od' }
]

.GxToolchainDef_Compiler_MSVC_Architecture_x64 = [
    .VisualStudioPlatform = 'x64'

    .CompilerOptions_Architecture
        = ' /arch:AVX'
        + ' /D__AVX__'
    .LinkerOptions_Architecture
        = ' /MACHINE:X64'
        + ' /LIBPATH:"$VsToolsLocation$/VC/Tools/MSVC/$VsToolsVersion$/lib/x64"'
        + ' /LIBPATH:"$WindowsSdkLocation$\Lib\$WindowsSdkVersion$\um\x64"'
        + ' /LIBPATH:"$WindowsSdkLocation$\Lib\$WindowsSdkVersion$\ucrt\x64"'
]

.GxToolchainDef_Compiler_MSVC_Architecture_ARMv8 = [
    .VisualStudioPlatform = 'ARM64'

    .CompilerOptions_Architecture
        = ' /DGRAPHYTE_MATH_NO_INTRINSICS=1'

    .LinkerOptions_Architecture
        = ' /MACHINE:ARM64'
        + ' /LIBPATH:"$VsToolsLocation$/VC/Tools/MSVC/$VsToolsVersion$/lib/arm64"'
        + ' /LIBPATH:"$WindowsSdkLocation$\Lib\$WindowsSdkVersion$\um\arm64"'
        + ' /LIBPATH:"$WindowsSdkLocation$\Lib\$WindowsSdkVersion$\ucrt\arm64"'
]

.GxToolchainDef_Compiler_MSVC_Architecture_x64_Platform_Windows = [
    .CompilerCXX = 'Compiler-Windows-x64-MSVC'
    .CompilerCC = 'Compiler-Windows-x64-MSVC'
    .ResCompiler = 'Compiler-Windows-ResourceCompiler'
    .Linker = '$VsToolsLocation$/VC/Tools/MSVC/$VsToolsVersion$/bin/HostX64/x64/link.exe'
    .Librarian = '$VsToolsLocation$/VC/Tools/MSVC/$VsToolsVersion$/bin/HostX64/x64/lib.exe'
]

.GxToolchainDef_Compiler_MSVC_Architecture_ARMv8_Platform_Windows = [
    .CompilerCXX = 'Compiler-Windows-ARMv8-MSVC'
    .CompilerCC = 'Compiler-Windows-ARMv8-MSVC'
    .ResCompiler = 'Compiler-Windows-ResourceCompiler'
    .Linker = '$VsToolsLocation$/VC/Tools/MSVC/$VsToolsVersion$/bin/HostX64/arm64/link.exe'
    .Librarian = '$VsToolsLocation$/VC/Tools/MSVC/$VsToolsVersion$/bin/HostX64/arm64/lib.exe'
]

.GxToolchainDef_Compiler_MSVC_Architecture_x64_Platform_UWP = [
    .CompilerCXX = 'Compiler-Windows-x64-MSVC'
    .CompilerCC = 'Compiler-Windows-x64-MSVC'
    .ResCompiler = 'Compiler-Windows-ResourceCompiler'
    .Linker = '$VsToolsLocation$/VC/Tools/MSVC/$VsToolsVersion$/bin/HostX64/x64/link.exe'
    .Librarian = '$VsToolsLocation$/VC/Tools/MSVC/$VsToolsVersion$/bin/HostX64/x64/lib.exe'
]

.GxToolchainDef_Compiler_MSVC_Architecture_ARMv8_Platform_UWP = [
    .CompilerCXX = 'Compiler-Windows-ARMv8-MSVC'
    .CompilerCC = 'Compiler-Windows-ARMv8-MSVC'
    .ResCompiler = 'Compiler-Windows-ResourceCompiler'
    .Linker = '$VsToolsLocation$/VC/Tools/MSVC/$VsToolsVersion$/bin/HostX64/arm64/link.exe'
    .Librarian = '$VsToolsLocation$/VC/Tools/MSVC/$VsToolsVersion$/bin/HostX64/arm64/lib.exe'
]


// -------------------------------------------------------------------------------------------------
// Clang compiler definition

.GxToolchainDef_Compiler_Clang = [
    .Prefix_Define = '-D'
    .Suffix_Define = ''
    .Prefix_Include = '-I'
    .Suffix_Include = ''
    .Prefix_LibPath = '-L'
    .Suffix_LibPath = ''
    .Prefix_Link = '-l'
    .Suffix_Link = ''

    .ToolchainDefines = {
    }

    .ToolchainIncludes = {
    }

    .CompilerOptions_Before
        = '"%1"'

    .CompilerOptions_After
        = ' -o "%2"'
        
    .LibrarianOptions_Before
        = ''

    .LibrarianOptions_After
        = ' "%2" "%1"'

    .LinkerOptions_Before
        = ''

    .LinkerOptions_After
        = ' "%2" "%1"'

    .CompilerOptions_Kind_SharedLib = ' -fpic'
    .LinkerOptions_Kind_SharedLib = ' -shared'

    .CompilerOptions_Kind_StaticLib = ' -fpic'
    .LinkerOptions_Kind_StaticLib = ' -static'

    .CompilerOptions_Kind_ConsoleApp = ' -fpic'
    .LinkerOptions_Kind_ConsoleApp = ' -pie'

    .CompilerOptions_Kind_WindowedApp = ' -fpic'
    .LinkerOptions_Kind_WindowedApp = ' -pie'
]

.GxToolchainDef_Compiler_Clang_Config_Debug = [
    .CompilerOptions_Config
        = ' -DGX_CONFIG_DEBUG=1'
        + ' -O0'
    .LinkerOptions_Config = ''
]

.GxToolchainDef_Compiler_Clang_Config_Checked = [
    .CompilerOptions_Config
        = ' -DGX_CONFIG_CHECKED=1'
        + ' -O1'
    .LinkerOptions_Config = ''
]
    
.GxToolchainDef_Compiler_Clang_Config_Profile = [
    .CompilerOptions_Config
        = ' -DGX_CONFIG_PROFILE=1'
        + ' -O2'
    .LinkerOptions_Config = ''
]
    
.GxToolchainDef_Compiler_Clang_Config_Release = [
    .CompilerOptions_Config
        = ' -DGX_CONFIG_RELEASE=1'
        + ' -O3'
    .LinkerOptions_Config = ''
]

.GxToolchainDef_Compiler_Clang_UnitTest_Debug = [
    .CompilerOptions_UnitTest_Remove = {}
    .CompilerOptions_UnitTest_Add = {}
]
.GxToolchainDef_Compiler_Clang_UnitTest_Checked = [
    .CompilerOptions_UnitTest_Remove = {}
    .CompilerOptions_UnitTest_Add = {}
]
.GxToolchainDef_Compiler_Clang_UnitTest_Profile = [
    .CompilerOptions_UnitTest_Remove = {}
    .CompilerOptions_UnitTest_Add = {}
]
.GxToolchainDef_Compiler_Clang_UnitTest_Release = [
    .CompilerOptions_UnitTest_Remove = {}
    .CompilerOptions_UnitTest_Add = {}
]


// -------------------------------------------------------------------------------------------------
// GCC definition

.GxToolchainDef_Compiler_GCC = [
    .Prefix_Define = '-D'
    .Suffix_Define = ''
    .Prefix_Include = '-I'
    .Suffix_Include = ''
    .Prefix_LibPath = '-L'
    .Suffix_LibPath = ''
    .Prefix_Link = '-l'
    .Suffix_Link = ''

    .ToolchainDefines = { }

    .ToolchainIncludes = { }

    .CompilerOptionsCXX_Before
        = ' -o "%2" "%1" -c -g'
        + ' -std=c++2a'
        + ' -fconcepts'
        + ' -fdiagnostics-color=always'

    .CompilerOptions_After
        = ''

    .CompilerOptionsCC_Before
        = ' -o "%2" "%1" -c -g'
        + ' -std=c11'
        + ' -fdiagnostics-color=always'
        
    .LibrarianOptions_Before
        = 'rcs "%2" "%1"'

    .LibrarianOptions_After
        = ''

    .LinkerOptions_Before
        = ' -Wl,--start-group "%1" -Wl,--end-group -o "%2"'
        + ' -lc'
        + ' -lm'
        + ' -lstdc++'
        + ' -lpthread'

    .LinkerOptions_After
        = ''

    .CompilerOptions_Kind_SharedLib = ' -fpic'
    .LinkerOptions_Kind_SharedLib = ' -shared'

    .CompilerOptions_Kind_StaticLib = ' -fpic'
    .LinkerOptions_Kind_StaticLib = ' -static'

    .CompilerOptions_Kind_ConsoleApp = ' -fpic'
    .LinkerOptions_Kind_ConsoleApp = ' -pie'

    .CompilerOptions_Kind_WindowedApp = ' -fpic'
    .LinkerOptions_Kind_WindowedApp = ' -pie'
]


.GxToolchainDef_Compiler_GCC_Architecture_x64 = [
    .CompilerOptions_Architecture
        = ' -mavx'
        + ' -msse4.1'
        + ' -msse3'
        + ' -mssse3'
        + ' -msse2'
        + ' -m64'
    .LinkerOptions_Architecture
        = ''
]

.GxToolchainDef_Compiler_GCC_Architecture_ARMv8 = [
    .CompilerOptions_Architecture
        = ' -DGRAPHYTE_MATH_NO_INTRINSICS=1'

    .LinkerOptions_Architecture
        = ' /MACHINE:ARM64'
]

.GxToolchainDef_Compiler_GCC_Architecture_x64_Platform_Linux = [
    .CompilerCXX = 'Compiler-Linux-x64-GCC-C++'
    .CompilerCC = 'Compiler-Linux-x64-GCC-C'
    .ResCompiler = ''
    .Linker = '/usr/bin/g++'
    .Librarian = '/usr/bin/ar'
]

.GxToolchainDef_Compiler_GCC_Architecture_ARMv8_Platform_Linux = [
    .CompilerCXX = 'Compiler-Linux-x64-GCC-C++'
    .CompilerCC = 'Compiler-Linux-x64-GCC-C'
    .ResCompiler = ''
    .Linker = '/usr/bin/g++'
    .Librarian = '/usr/bin/ar'
]

.GxToolchainDef_Compiler_GCC_Config_Debug = [
    .CompilerOptions_Config
        = ' -DGX_CONFIG_DEBUG=1'
        + ' -O0'
    .LinkerOptions_Config = ''
]

.GxToolchainDef_Compiler_GCC_Config_Checked = [
    .CompilerOptions_Config
        = ' -DGX_CONFIG_CHECKED=1'
        + ' -O1'
    .LinkerOptions_Config = ''
]
    
.GxToolchainDef_Compiler_GCC_Config_Profile = [
    .CompilerOptions_Config
        = ' -DGX_CONFIG_PROFILE=1'
        + ' -O2'
    .LinkerOptions_Config = ''
]
    
.GxToolchainDef_Compiler_GCC_Config_Release = [
    .CompilerOptions_Config
        = ' -DGX_CONFIG_RELEASE=1'
        + ' -O3'
    .LinkerOptions_Config = ''
]

.GxToolchainDef_Compiler_GCC_UnitTest_Debug = [
    .CompilerOptions_UnitTest_Remove = {}
    .CompilerOptions_UnitTest_Add = {}
]
.GxToolchainDef_Compiler_GCC_UnitTest_Checked = [
    .CompilerOptions_UnitTest_Remove = {}
    .CompilerOptions_UnitTest_Add = {}
]
.GxToolchainDef_Compiler_GCC_UnitTest_Profile = [
    .CompilerOptions_UnitTest_Remove = {}
    .CompilerOptions_UnitTest_Add = {}
]
.GxToolchainDef_Compiler_GCC_UnitTest_Release = [
    .CompilerOptions_UnitTest_Remove = {}
    .CompilerOptions_UnitTest_Add = {}
]
