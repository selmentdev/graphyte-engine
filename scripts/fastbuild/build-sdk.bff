{
    .Aliases_Sdk = []

    ForEach(.CurrentProject in .Global_ProjectSdkList) {
        ForEach(.CurrentConfig in .Global_ConfigDefinitionList) {
            Using(.CurrentProject)
            Using(.CurrentConfig)

            // Create variant selectors
            .LocalVariantSelector = {
                'All'
                '$ConfigPlatform$'
                '$ConfigPlatform$-$ToolchainArchitecture$'
                '$ConfigPlatform$-$ToolchainArchitecture$-$ConfigName$'
                '$ConfigPlatform$-$ConfigName$'
            }

            If (.LocalVariantSelector in .ProjectSelector) {
                ForEach(.CurrentVariant in .ProjectVariants) {
                    Using(.CurrentVariant)

                    If (.LocalVariantSelector in .VariantSelector) {
                        ^ProjectFiles + .VariantFiles
                    }
                }
                Print('$ConfigPlatform$-$ToolchainArchitecture$-$ConfigName$')

                .CompilerOutputPath = '$OutputBase$/obj/$ProjectName$-$ToolchainName$-$ConfigName$'
                .CompilerInputFiles = .ProjectFiles
                .CompilerInputFilesRoot = .ProjectPath

                .CompilerOptions + ' $Toolchain_IncludePath_Prefix$$ProjectPath$/include$Toolchain_IncludePath_Suffix$'
                .CompilerOptions + .'Toolchain_CompilerOptions_$ProjectKind$'

                ForEach(.CurrentInclude in .ProjectIncludes) {
                    ^CompilerOptions + ' $Toolchain_IncludePath_Prefix$$CurrentInclude$$Toolchain_IncludePath_Suffix$'
                }

                ForEach(.CurrentDefine in .ProjectDefines) {
                    ^CompilerOptions + ' $Toolchain_Define_Prefix$$CurrentDefine$$Toolchain_Define_Suffix$'
                }

                .Libraries = {
                    '$ProjectName$-Lib-$ToolchainName$-$ConfigName$'
                }

                ForEach(.CurrentImport in .ProjectImports) {
                    ^Libraries + '$CurrentImport$-$ToolchainName$-$ConfigName$'
                }

                ForEach(.CurrentLink in .ProjectLinks) {
                    ^Libraries + '$Toolchain_Library_Prefix$$CurrentLink$$Toolchain_Library_Suffix$'
                }

                If (.ProjectKind == .ProjectKind_SharedLib) {
                    ObjectList('$ProjectName$-Lib-$ToolchainName$-$ConfigName$') { }

                    DLL('$ProjectName$-$ToolchainName$-$ConfigName$') {
                        .LibrarianAdditionalInputs = '$ProjectName$-Lib-$ToolchainName$-$ConfigName$'
                        .LinkerOutput = '$OutputBase$/bin/$ToolchainName$-$ConfigName$/$Toolchain_SharedLibrary_Prefix$$ProjectName$$Toolchain_SharedLibrary_Suffix$'
                        .LinkerOptions + .'Toolchain_LinkerOptions_$ProjectKind$'
                    }
                }

                If (.ProjectKind == .ProjectKind_StaticLib) {
                    Library('$ProjectName$-$ToolchainName$-$ConfigName$') {
                        .LibrarianOutput = '$OutputBase$/lib/$ProjectName$-$ToolchainName$-$ConfigName$/$Toolchain_StaticLibrary_Prefix$$ProjectName$$Toolchain_StaticLibrary_Suffix$'
                    }
                }


                .Aliases_Sdk_Entry =
                [
                    .'Aliases_$ConfigPlatform$_$ToolchainArchitecture$_$ConfigName$' = { '$ProjectName$-$ToolchainName$-$ConfigName$' }
                ]
                ^Aliases_Sdk + .Aliases_Sdk_Entry
            }
        }
    }

    {
        Using(.Aliases_Sdk)

        ForEach(.CurrentConfig in .Global_ConfigDefinitionList) {
            Using(.CurrentConfig)

            Alias('All-Sdks-$ToolchainName$-$ConfigName$') {
                .Targets = .'Aliases_$ConfigPlatform$_$ToolchainArchitecture$_$ConfigName$'
            }
        }
    }
}