// -------------------------------------------------------------------------------------------------
// This script defines all targets for building static/shared libs with SDKs built from sources.

{
    .AllSdkAliases = []

    ForEach(.CurrentProject in .Global_SdkList) {
        ForEach(.CurrentTriplet in .ValidToolchainTriplets) {

            // Import toolchain definition
            Using(.'ToolchainDesc_$CurrentTriplet$')

            ForEach(.CurrentConfig in .ValidConfigurations) {

                // Default values for project settings.
                .ProjectSelector = { 'All' }
                .ProjectIncludes = {}
                .ProjectImports = {}
                .ProjectLinks = {}
                .ProjectDefines = {}
                .ProjectVariants = {}

                // Use project configuration
                Using(.CurrentProject)

                // Create selector used to disable project from targets list
                .LocalVariantSelector = {
                    'All'
                    '$Platform_Name$'
                    '$Platform_Name$-$Toolchain_Architecture$'
                    '$Platform_Name$-$Toolchain_Architecture$-$CurrentConfig$'
                    '$Platform_Name$-$CurrentConfig$'
                }

                // Check if project can be compiled
                If (.LocalVariantSelector in .ProjectSelector) {
                    .CompilerOptions = .CompilerOptions
                    .LinkerOptions = .LinkerOptions

                    // Update optional variant specializations
                    ForEach(.CurrentVariant in .ProjectVariants) {

                        // Optional variant configuration values
                        .VariantFiles = {}
                        .VariantDefines = {}
                        .VariantIncludes = {}
                        .VariantLinks = {}
                        .VariantImports = {}

                        // Specialize variant
                        Using(.CurrentVariant)

                        // Update configuration project variables
                        If (.LocalVariantSelector in .VariantSelector) {
                            ^ProjectFiles + .VariantFiles
                            ^ProjectIncludes + .VariantIncludes
                            ^ProjectImports + .VariantImports
                            ^ProjectLinks + .VariantLinks
                            ^ProjectDefines + .VariantDefines
                        }
                    }

                    // Add kind specific flags
                    {
                        Using(.'Options_Kind_$ProjectKind$')
                        ^CompilerOptions + .KindCompilerOptions
                        ^LinkerOptions   + .KindLinkerOptions
                    }

                    // Add config specific flags
                    Using(.'Options_Config_$CurrentConfig$')
                    {
                        ^CompilerOptions + .ConfigCompilerOptions
                        ^LinkerOptions   + .ConfigLinkerOptions
                    }

                    .LocalOutputName = .'Platform_$ProjectKind$_Prefix' + .ProjectName + .'Platform_$ProjectKind$_Suffix'

                    .LocalTargetPrefix = '$Platform_Name$-$Toolchain_Architecture$-$Toolchain_Name$-$CurrentConfig$'
                    .LocalTargetName = '$ProjectName$-$LocalTargetPrefix$'

                    .LocalAliasVarName = '$Platform_Name$_$Toolchain_Architecture$_$Toolchain_Name$_$CurrentConfig$'

                    // Specialize compiler settings
                    .CompilerOutputPath = '$OutputBase$/obj/$LocalTargetName$'
                    .CompilerInputFiles = .ProjectFiles
                    .CompilerInputFilesRoot = .ProjectPath

                    .CompilerOptions + ' $Toolchain_Include_Prefix$$ProjectPath$/include$Toolchain_Include_Suffix$'

                    ForEach(.CurrentInclude in .ProjectIncludes) {
                        ^CompilerOptions + ' $Toolchain_Include_Prefix$$CurrentInclude$$Toolchain_Include_Suffix$'
                    }

                    ForEach(.CurrentDefine in .ProjectDefines) {
                        ^CompilerOptions + ' $Toolchain_Define_Prefix$$CurrentDefine$$Toolchain_Define_Suffix$'
                    }


                    If (.ProjectKind == .ProjectKind_SharedLib) {
                        ObjectList('Lib-$LocalTargetName$') { }

                        .Libraries = {
                            'Lib-$LocalTargetName$'
                        }

                        ForEach(.CurrentImport in .ProjectImports) {
                            ^Libraries + '$CurrentImport$-$LocalTargetPrefix$'
                        }

                        ForEach(.CurrentLink in .ProjectLinks) {
                            ^Libraries + '$Toolchain_Link_Prefix$$CurrentLink$$Toolchain_Link_Suffix$'
                        }

                        DLL('$LocalTargetName$') {
                            .LibrarianAdditionalInputs = 'Lib-$LocalTargetName$'
                            .LinkerOutput = '$OutputBase$/bin/$LocalTargetPrefix$/$LocalOutputName$'
                        }
                    }

                    If (.ProjectKind == .ProjectKind_StaticLib) {
                        Library('$LocalTargetName$') {
                            .LibrarianOutput = '$OutputBase$/lib/$LocalTargetPrefix$/$LocalOutputName$'
                        }
                    }

                    .CurrentAlias = [
                        .'SdkAlias_$LocalAliasVarName$' = { '$LocalTargetName$' }
                    ]

                    ^AllSdkAliases + .CurrentAlias
                }
            }
        }
    }
    {
        Using(.AllSdkAliases)

        .AllTargets = {}

        ForEach(.CurrentTriplet in .ValidToolchainTriplets) {
            .TripletTargets = {}
            ForEach(.CurrentConfig in .ValidConfigurations) {
                ^TripletTargets + .'SdkAlias_$CurrentTriplet$_$CurrentConfig$'
            }

            Alias('All-Sdks-$CurrentTriplet$') {
                .Targets = .TripletTargets
            }

            ^AllTargets + 'All-Sdks-$CurrentTriplet$'
        }

        Alias('All-Sdks') {
            .Targets = .AllTargets
        }
    }
}
