// -------------------------------------------------------------------------------------------------
// This script defines targets for building game/engine modules and plugins

.SolutionConfigs = {}

// -------------------------------------------------------------------------------------------------
// Define windows resources and solution configs for Visual Studio
{

    ForEach(.CurrentTriplet in .Global_Triplets) {
        Using(.CurrentTriplet)

        // Import toolchain definition
        Using(.'ToolchainDesc_$Triplet_Platform$_$Triplet_Architecture$_$Triplet_Compiler$')

        If (.Platform_Windows == .Platform_Name) {
            ForEach(.CurrentConfig in .ValidConfigurations) {
                .ProjectConfig = [
                    .Config = '$CurrentConfig$'
                    .Platform = '$Toolchain_VisualStudio_Architecture$'
                    .SolutionConfig = '$CurrentConfig$'
                    .SolutionPlatform = .CurrentTriplet
                ]
                ^SolutionConfigs + .ProjectConfig

                .LocalTargetPrefix = '$Platform_Name$-$Toolchain_Architecture$-$Toolchain_Name$-$CurrentConfig$'

                ObjectList('Graphyte-Res-$LocalTargetPrefix$')
                {
                    .Compiler = .ResCompiler
                    .CompilerInputFiles = { 'engine/resources/resources.rc' }
                    .CompilerOutputPath = '$OutputBase$/obj/$LocalTargetPrefix$/Graphyte-Res'
                    .CompilerOutputExtension = '.res'
                    .CompilerOptions
                        = ' /nologo'
                        + ' /fo"%2"'
                        + .SystemIncludes
                        + ' /I"engine/include"'
                        + ' "%1"'
                }
            }
        }
    }
}

{
    .AliasesList = []

    ForEach(.CurrentProject in .Global_ProjectList) {

        .VisualStudioProjects = {}

        // Default values for project settings.
        .ProjectSelector = { 'All' }
        .ProjectType = {}
        .ProjectIncludes = {}
        .ProjectImports = {}
        .ProjectLinks = {}
        .ProjectDefines = {}
        .ProjectVariants = {}

        // Use values from current project
        Using(.CurrentProject)

        // Define unity build for this projects
        {
            .UnityInputPath = '$ProjectPath$'
            .UnityInputPattern = { '*.cxx' }
            .UnityOutputPath = '$OutputBase$/unity/$ProjectPath$'
            .UnityOutputPattern = '$ProjectName$-unity-*.cxx'

            Unity('$ProjectName$-Unity-Windows') {
                .UnityInputExcludePattern = {
                    '*Linux.*.cxx'
                    '*Posix.*.cxx'
                    '*Android.*.cxx'
                }
            }

            Unity('$ProjectName$-Unity-Linux') {
                .UnityInputExcludePattern = {
                    '*Windows.*.cxx'
                    '*Android.*.cxx'
                }
            }

            Unity('$ProjectName$-Unity-Android') {
                .UnityInputExcludePattern = {
                    '*Windows.*.cxx'
                    '*Linux.*.cxx'
                }
            }
        }

        // Define targets for all projects
        ForEach(.CurrentTriplet in .Global_Triplets) {
            Using(.CurrentTriplet)

            .TripletName = '$Triplet_Platform$-$Triplet_Architecture$-$Triplet_Compiler$'

            // Import toolchain definition
            Using(.'ToolchainDesc_$Triplet_Platform$_$Triplet_Architecture$_$Triplet_Compiler$')

            ForEach(.CurrentConfig in .ValidConfigurations) {
                .TripletConfigName = '$TripletName$-$CurrentConfig$'

                // Create selector used to disable project from targets list
                .LocalVariantSelector = {
                    'All'
                    '$Triplet_Platform$'
                    '$Triplet_Platform$-$Triplet_Architecture$'
                    '$Triplet_Platform$-$Triplet_Architecture$-$CurrentConfig$'
                    '$Triplet_Platform$-$CurrentConfig$'
                    '$Triplet_Platform$-$Triplet_Compiler$-$CurrentConfig$'
                    '$TripletName$'
                    '$TripletConfigName$'
                    '$CurrentConfig$'
                }

                // Check if project can be compiled
                If (.LocalVariantSelector in .ProjectSelector) {
                    // Redefine variables in current scope
                    .CompilerOptions = .CompilerOptions
                    .LinkerOptions = .LinkerOptions
                    .ProjectIncludes = .ProjectIncludes
                    .ProjectImports = .ProjectImports
                    .ProjectLinks = .ProjectLinks
                    .ProjectDefines = .ProjectDefines

                    // Update optional variant specializations
                    ForEach(.CurrentVariant in .ProjectVariants) {

                        // Optional variant configuration values
                        .VariantDefines = {}
                        .VariantIncludes = {}
                        .VariantLinks = {}
                        .VariantImports = {}

                        // Specialize variant
                        Using(.CurrentVariant)

                        // Update configuration project variables
                        If (.LocalVariantSelector in .VariantSelector) {
                            ^ProjectIncludes + .VariantIncludes
                            ^ProjectImports + .VariantImports
                            ^ProjectLinks + .VariantLinks
                            ^ProjectDefines + .VariantDefines
                        }
                    }

                    // Add kind specific flags
                    {
                        Using(.'Options_Kind_$ProjectKind$')
                        ^CompilerOptions + .KindCompilerOptions
                        ^LinkerOptions   + .KindLinkerOptions
                    }

                    // Add config specific flags
                    {
                        Using(.'Options_Config_$CurrentConfig$')
                        ^CompilerOptions + .ConfigCompilerOptions
                        ^LinkerOptions   + .ConfigLinkerOptions
                    }

                    .LocalOutputName = .'Platform_$ProjectKind$_Prefix' + .ProjectName + .'Platform_$ProjectKind$_Suffix'

                    .LocalTargetPrefix = '$Platform_Name$-$Toolchain_Architecture$-$Toolchain_Name$-$CurrentConfig$'
                    .LocalTargetName = '$ProjectName$-$LocalTargetPrefix$'

                    .LocalAliasVarName = '$Platform_Name$_$Toolchain_Architecture$_$Toolchain_Name$_$CurrentConfig$'

                    // Specialize compiler settings
                    .CompilerOutputPath = '$OutputBase$/obj/$TripletConfigName$/$ProjectName$'

                    .CompilerOptions
                        + ' $Toolchain_Include_Prefix$$ProjectPath$/private$Toolchain_Include_Suffix$'
                        + ' $Toolchain_Include_Prefix$$ProjectPath$/public$Toolchain_Include_Suffix$'
                        + ' $Toolchain_Include_Prefix$engine/include$Toolchain_Include_Suffix$'

                    ForEach(.CurrentInclude in .ProjectIncludes) {
                        ^CompilerOptions + ' $Toolchain_Include_Prefix$$CurrentInclude$$Toolchain_Include_Suffix$'
                    }

                    ForEach(.CurrentDefine in .ProjectDefines) {
                        ^CompilerOptions + ' $Toolchain_Define_Prefix$$CurrentDefine$$Toolchain_Define_Suffix$'
                    }

                    If (.ProjectType in .ValidProjectTypes_Tests) {
                        Using(.'UnitTest_CompilerOptions_$CurrentConfig$')

                        ForEach(.Option in .RemoveCompilerOptions) {
                            ^CompilerOptions - .Option
                        }

                        ForEach(.Option in .AddCompilerOptions) {
                            ^CompilerOptions + .Option
                        }
                    }

                    ObjectList('Lib-$LocalTargetName$') {
                        .CompilerInputUnity = '$ProjectName$-Unity-$Platform_Name$'
                    }

                    .Libraries = {
                        'Lib-$LocalTargetName$'
                    }

                    If (.Platform_Windows == .Platform_Name) {
                        ^Libraries + 'Graphyte-Res-$LocalTargetPrefix$'
                    }

                    ForEach(.CurrentImport in .ProjectImports) {
                        ^Libraries + '$CurrentImport$-$LocalTargetPrefix$'
                    }

                    ForEach(.CurrentLink in .ProjectLinks) {
                        ^LinkerOptions + ' $Toolchain_Link_Prefix$$CurrentLink$$Toolchain_Link_Suffix$'
                    }

                    .LinkerOutput = '$OutputBase$/bin/$LocalTargetPrefix$/$LocalOutputName$'
                    .LibrarianAdditionalInputs = 'Lib-$LocalTargetName$'
                    .LibrarianOutput = '$OutputBase$/lib/$LocalTargetPrefix$/$LocalOutputName$'

                    If (.ProjectKind == .ProjectKind_SharedLib) {
                        DLL('$LocalTargetName$') { }
                    }

                    If (.ProjectKind == .ProjectKind_StaticLib) {
                        Library('$LocalTargetName$') { }
                    }

                    If (.ProjectKind == .ProjectKind_ConsoleApp) {
                        Executable('$LocalTargetName$') { }
                    }

                    If (.ProjectKind == .ProjectKind_WindowedApp) {
                        Executable('$LocalTargetName$') { }
                    }

                    .CurrentAlias = [
                        .'TargetList_$LocalAliasVarName$' = { '$LocalTargetName$' }
                    ]

                    ^AliasesList + .CurrentAlias
                }
            }
        }
    }

    //
    // Aliases for engine projects
    //
    {
        Using(.AliasesList)

        .AllTargets = {}

        ForEach(.CurrentTriplet in .Global_Triplets) {
            Using(.CurrentTriplet)

            .TripletName = '$Triplet_Platform$-$Triplet_Architecture$-$Triplet_Compiler$'
            .TripletTargets = {}
            
            ForEach(.CurrentConfig in .ValidConfigurations) {
                ^TripletTargets + .'TargetList_$Triplet_Platform$_$Triplet_Architecture$_$Triplet_Compiler$_$CurrentConfig$'
            }

            Alias('All-$TripletName$') {
                .Targets = .TripletTargets
            }

            ^AllTargets + 'All-$TripletName$'
        }

        Alias('All-Modules') {
            .Targets = .AllTargets
        }
    }

    //
    // Generate aliases for all tests.
    //
    // Aliases:
    //
    //  Tests-{Platform}-{Architecture}-{Compiler}
    //      Tests-{Platform}-{Architecture}-{Compiler}-{Config}
    //          Test-{Project}-{Platform}-{Architecture}-{Compiler}-{Config}
    //
    {
        ForEach(.CurrentTriplet in .Global_Triplets) {
            Using(.CurrentTriplet)
            .TripletAliases = {}

            .TripletName = '$Triplet_Platform$-$Triplet_Architecture$-$Triplet_Compiler$'

            ForEach(.CurrentConfig in .ValidConfigurations) {
                .Aliases = {}

                .TripletConfigName = '$TripletName$-$CurrentConfig$'

                ForEach(.CurrentProject in .Global_ProjectList) {
                    .ProjectType = {}
                    Using(.CurrentProject)

                    If (.ProjectType in .ValidProjectTypes_Tests) {

                        .LocalTargetName = '$ProjectName$-$TripletConfigName$'

                        ^Aliases + 'Test-$LocalTargetName$'

                        Test('Test-$LocalTargetName$') {
                            .TestExecutable = '$LocalTargetName$'
                            .TestOutput = '$OutputBase$/tests/$TripletConfigName$/$ProjectName$.out.txt'
                            .TestArguments = '--force-no-log'
                        }
                    }
                }

                Alias('Tests-$TripletConfigName$') {
                    .Targets = .Aliases
                }

                ^TripletAliases + 'Tests-$TripletConfigName$'
            }

            Alias('Tests-$TripletName$') {
                .Targets = .TripletAliases
            }
        }
    }

#if __WINDOWS__
    //
    // Visual Studio projects
    //

#endif
}
