// -------------------------------------------------------------------------------------------------
// Remarks:
//      This scripts generates targets for all projects, platforms, compilers and architectures with
//      proper Visual Studio solutions.

ForEach(.CurrentPlatform in .GxPlatforms) {
    Using(.'GxPlatformDef_$CurrentPlatform$')

    ForEach(.CurrentCompiler in .'GxPlatformCompilers_$CurrentPlatform$') {
        Using(.'GxToolchainDef_Compiler_$CurrentCompiler$')

        ForEach(.CurrentArchitecture in .'GxPlatformArchitectures_$CurrentPlatform$_$CurrentCompiler$') {
            Using(.'GxToolchainDef_Compiler_$CurrentCompiler$_Architecture_$CurrentArchitecture$')
            Using(.'GxToolchainDef_Compiler_$CurrentCompiler$_Architecture_$CurrentArchitecture$_Platform_$CurrentPlatform$')

            // Define Windows and UWP resources
            {
                .ResIncludePaths = ''

                ForEach(.CurrentIncludePath in .PlatformIncludes) {
                    ^ResIncludePaths + ' /I"$CurrentIncludePath$"'
                }

                ForEach(.CurrentBuildType in .GxValidBuildTypes) {
                    ForEach(.CurrentConfig in .GxValidConfigurations) {
                        ObjectList('Graphyte-Resources-$CurrentPlatform$-$CurrentArchitecture$-$CurrentCompiler$-$CurrentBuildType$-$CurrentConfig$') {
                            .Compiler = 'Compiler-Windows-ResourceCompiler'
                            .CompilerInputFiles = { 'engine/resources/resources.rc' }
                            .CompilerOutputPath = '$OutputBase$/obj/$CurrentPlatform$-$CurrentArchitecture$-$CurrentCompiler$-$CurrentBuildType$-$CurrentConfig$/Graphyte-Resources'
                            .CompilerOutputExtension = '.res'
                            .CompilerOptions
                                = ' /nologo'
                                + ' /fo"%2"'
                                + .ResIncludePaths
                                + ' /I"engine/include"'
                                + ' "%1"'
                        }
                    }
                }
            }

            ForEach(.CurrentBuildType in .GxValidBuildTypes) {
                ForEach(.CurrentConfig in .GxValidConfigurations) {
                    Using(.'GxToolchainDef_Compiler_$CurrentCompiler$_Config_$CurrentConfig$')
                    Using(.'GxToolchainDef_Compiler_$CurrentCompiler$_UnitTest_$CurrentConfig$')
                    Using(.'GxToolchainDef_Compiler_$CurrentCompiler$_BuildType_$CurrentBuildType$')

                    // List of targets built with `Build-All` meta-project
                    .MetaBuildAllTargets = {}

                    // List of targets ran with `Test-All meta-project
                    .MetaRunAllTargets = {}

                    ForEach(.CurrentProject in .Global_ProjectList) {
                        // Define project defaults
                        .ProjectSelector = { 'All' }
                        .ProjectType = ''
                        .ProjectKind = ''
                        .ProjectComponent = ''
                        .ProjectFiles = {}
                        .ProjectIncludes = {}
                        .ProjectImports = {}
                        .ProjectLinks = {}
                        .ProjectDefines = {}
                        .ProjectLibPaths = {}
                        .ProjectVariants = {}
                        .ProjectLanguage = 'CXX'

                        // Import project settings
                        Using(.CurrentProject)

                        // Validate required project settings
                        If(.ProjectType not in .GxValidProjectTypes) {
                            Print('$ProjectName$ type is `$ProjectType$`')
                            Print(.GxValidProjectTypes)
                            Error('Invalid project type')
                        }

                        If (.ProjectComponent not in .GxValidProjectComponents) {
                            Print('$ProjectName$ component is `$ProjectComponent$`')
                            Error('Invalid project component')
                        }

                        If (.ProjectKind not in .GxValidProjectKinds) {
                            Print('$ProjectName$ kind is `$ProjectKind$`')
                            Error('Invalid project kind')
                        }

                        // Retail build builds only static libs

                        //If (.CurrentBuildType == .GxBuildType_Retail) {
                        //    If (.ProjectComponent != .GxProjectComponent_Sdks) {
                        //        If (.ProjectKind == .GxProjectKind_SharedLib) {
                        //            ^ProjectKind = .GxProjectKind_StaticLib
                        //        }
                        //    }
                        //}

                        // Define output file name
                        .LocalOutputName = .'Prefix_$ProjectKind$' + .ProjectName + .'Suffix_$ProjectKind$'

                        // Define unity files for project supporting them
                        If(.GxProjectComponent_Sdks != .ProjectComponent) {
                            Unity('Unity-$ProjectName$-$CurrentPlatform$-$CurrentArchitecture$-$CurrentCompiler$-$CurrentBuildType$-$CurrentConfig$') {
                                .UnityInputPath = '$ProjectPath$'
                                .UnityInputPattern = { '*.cxx' }
                                .UnityOutputPath = '$OutputBase$/unity/$CurrentPlatform$-$CurrentArchitecture$-$CurrentCompiler$-$CurrentBuildType$-$CurrentConfig$' // TODO TEST IT
                                .UnityOutputPattern = '$ProjectName$-unity-*.cxx'
                                .UnityNumFiles = 1
                            }
                        }

                        .LocalFiles
                            = .ProjectFiles
                        .LocalIncludes
                            = .PlatformIncludes
                            + .ToolchainIncludes
                            + .ProjectIncludes
                            + '$ProjectPath$/public'
                            + 'engine/include'
                        .LocalImports
                            = .ProjectImports
                        .LocalLinks
                            = .ProjectLinks
                        .LocalDefines
                            = .PlatformDefines
                            + .ToolchainDefines
                            + .ProjectDefines
                        .LocalLibPaths
                            = .ProjectLibPaths

                        .LocalVariantSelector = {
                            'All'
                            '$CurrentPlatform$'
                            '$CurrentPlatform$-$CurrentArchitecture$'
                            '$CurrentPlatform$-$CurrentArchitecture$-$CurrentCompiler$'
                            '$CurrentPlatform$-$CurrentConfig$'
                            '$CurrentPlatform$-$CurrentArchitecture$-$CurrentConfig$'
                            '$CurrentPlatform$-$CurrentArchitecture$-$CurrentCompiler$-$CurrentConfig$'
                            '$CurrentBuildType$'
                            '$CurrentPlatform$-$CurrentBuildType$'
                            '$CurrentPlatform$-$CurrentBuildType$-$CurrentArchitecture$'
                            '$CurrentPlatform$-$CurrentBuildType$-$CurrentArchitecture$-$CurrentCompiler$'
                            '$CurrentPlatform$-$CurrentBuildType$-$CurrentConfig$'
                            '$CurrentPlatform$-$CurrentBuildType$-$CurrentArchitecture$-$CurrentConfig$'
                            '$CurrentPlatform$-$CurrentBuildType$-$CurrentArchitecture$-$CurrentCompiler$-$CurrentConfig$'
                        }

                        ForEach(.CurrentVariant in .ProjectVariants) {
                            // default variant values
                            .VariantFiles = {}
                            .VariantDefines = {}
                            .VariantIncludes = {}
                            .VariantLinks = {}
                            .VariantImports = {}
                            .VariantLibPaths = {}

                            Using(.CurrentVariant)

                            If (.LocalVariantSelector in .VariantSelector) {
                                // Apply variant specialization
                                ^LocalFiles + .VariantFiles
                                ^LocalIncludes + .VariantIncludes
                                ^LocalImports + .VariantImports
                                ^LocalLinks + .VariantLinks
                                ^LocalDefines + .VariantDefines
                                ^LocalLibPaths + .VariantLibPaths
                            }
                        }

                        ; Create compiler options from defines
                        .CompilerOptions_LocalDefines = ''
                        ForEach(.CurrentDefine in .LocalDefines) {
                            ^CompilerOptions_LocalDefines + ' $Prefix_Define$$CurrentDefine$$Suffix_Define$'
                        }

                        ; Create compiler options from includes
                        .CompilerOptions_LocalIncludes = ''
                        ForEach(.CurrentIncludePath in .LocalIncludes) {
                            ^CompilerOptions_LocalIncludes + ' $Prefix_Include$$CurrentIncludePath$$Suffix_Include$'
                        }

                        ; Create linker options from lib paths
                        .LinkerOptions_LocalLibPaths = ''
                        ForEach(.CurrentLibPath in .LocalLibPaths) {
                            ^LinkerOptions_LocalLibPaths + ' $Prefix_LibPath$$CurrentLibPath$$Suffix_LibPath$'
                        }

                        ; Create linker options from links
                        .LinkerOptions_LocalLinks = ''
                        ForEach(.CurrentLink in .LocalLinks) {
                            ^LinkerOptions_LocalLinks + ' $Prefix_Link$$CurrentLink$$Suffix_Link$'
                        }

                        ; Define libraries dependencies for current target
                        .Libraries = {
                            'Lib-$ProjectName$-$CurrentPlatform$-$CurrentArchitecture$-$CurrentCompiler$-$CurrentBuildType$-$CurrentConfig$'
                        }

                        // Add resources for windows platform
                        If (.CurrentPlatform == .GxPlatform_Windows) {
                            ^Libraries + 'Graphyte-Resources-$CurrentPlatform$-$CurrentArchitecture$-$CurrentCompiler$-$CurrentBuildType$-$CurrentConfig$'
                        }

                        If (.CurrentPlatform == .GxPlatform_UWP) {
                            ^Libraries + 'Graphyte-Resources-$CurrentPlatform$-$CurrentArchitecture$-$CurrentCompiler$-$CurrentBuildType$-$CurrentConfig$'
                        }

                        ForEach(.CurrentImport in .LocalImports) {
                            ^Libraries + '$CurrentImport$-$CurrentPlatform$-$CurrentArchitecture$-$CurrentCompiler$-$CurrentBuildType$-$CurrentConfig$'
                        }

                        // Specify path where compiler should output object files
                        .CompilerOutputPath = '$OutputBase$/obj/$CurrentPlatform$-$CurrentArchitecture$-$CurrentCompiler$-$CurrentBuildType$-$CurrentConfig$/$ProjectName$'

                        // Default compiler, linker and librarian options from platform and toolchain definitions.
                        .CompilerOptions = ''
                            + .'CompilerOptions$ProjectLanguage$_Before'
                            + .CompilerOptions_Architecture
                            + .'CompilerOptions_Kind_$ProjectKind$'
                            + .CompilerOptions_Config
                            + .CompilerOptions_BuildType
                            + .CompilerOptions_LocalIncludes
                            + .CompilerOptions_LocalDefines
                            + .CompilerOptions_After
                            + .CompilerOptions_Architecture_Platform

                        // Determine compiler
                        .Compiler = .'Compiler$ProjectLanguage$'

                        // Additional unit test fixups for MSVC
                        If(.ProjectType == .GxProjectType_UnitTest) {
                            ForEach(.Option in .CompilerOptions_UnitTest_Remove) {
                                ^CompilerOptions - .Option
                            }

                            ForEach(.Option in .CompilerOptions_UnitTest_Add) {
                                ^CompilerOptions + .Option
                            }
                        }

                        // Librarian settings
                        .LibrarianOptions
                            = .LibrarianOptions_Before
                            + .LibrarianOptions_After

                        .LibrarianAdditionalInputs = 'Lib-$ProjectName$-$CurrentPlatform$-$CurrentArchitecture$-$CurrentCompiler$-$CurrentBuildType$-$CurrentConfig$'
                        .LibrarianOutput = '$OutputBase$/bin/$CurrentPlatform$-$CurrentArchitecture$-$CurrentCompiler$-$CurrentBuildType$-$CurrentConfig$/$LocalOutputName$'

                        // Setup linker and librarian output paths
                        .LinkerOutput = '$OutputBase$/bin/$CurrentPlatform$-$CurrentArchitecture$-$CurrentCompiler$-$CurrentBuildType$-$CurrentConfig$/$LocalOutputName$'

                        .LinkerOptions
                            = .LinkerOptions_Before
                            + .LinkerOptions_LocalLibPaths
                            + .LinkerOptions_Config
                            + .LinkerOptions_Architecture
                            + .'LinkerOptions_Kind_$ProjectKind$'
                            + .LinkerOptions_LocalLinks
                            + .LinkerOptions_After

                        If(.GxProjectComponent_Sdks == .ProjectComponent) {
                            // Object list for SDKs aren't using unity files at all
                            ObjectList('Lib-$ProjectName$-$CurrentPlatform$-$CurrentArchitecture$-$CurrentCompiler$-$CurrentBuildType$-$CurrentConfig$') {
                                .CompilerInputFiles = .LocalFiles
                                .CompilerInputFilesRoot = .ProjectPath
                            }
                        }

                        If(.GxProjectComponent_Sdks != .ProjectComponent) {
                            // Generate object list for specified unity files
                            ObjectList('Lib-$ProjectName$-$CurrentPlatform$-$CurrentArchitecture$-$CurrentCompiler$-$CurrentBuildType$-$CurrentConfig$') {
                                .CompilerInputUnity = 'Unity-$ProjectName$-$CurrentPlatform$-$CurrentArchitecture$-$CurrentCompiler$-$CurrentBuildType$-$CurrentConfig$'
                            }
                        }

                        // Define actual Fastbuild targets
                        If (.ProjectKind == .GxProjectKind_SharedLib) {
                            DLL('$ProjectName$-$CurrentPlatform$-$CurrentArchitecture$-$CurrentCompiler$-$CurrentBuildType$-$CurrentConfig$') { }
                        }

                        If (.ProjectKind == .GxProjectKind_StaticLib) {
                            Library('$ProjectName$-$CurrentPlatform$-$CurrentArchitecture$-$CurrentCompiler$-$CurrentBuildType$-$CurrentConfig$') { }
                        }

                        If (.ProjectKind in .GxProjectKind_App) {
                            Executable('$ProjectName$-$CurrentPlatform$-$CurrentArchitecture$-$CurrentCompiler$-$CurrentBuildType$-$CurrentConfig$') { }
                        }

                        // If this executable was unit-test, define additional target
                        If (.ProjectType == .GxProjectType_UnitTest) {
                            Test('Test-$ProjectName$-$CurrentPlatform$-$CurrentArchitecture$-$CurrentCompiler$-$CurrentBuildType$-$CurrentConfig$') {
                                .TestExecutable = '$ProjectName$-$CurrentPlatform$-$CurrentArchitecture$-$CurrentCompiler$-$CurrentBuildType$-$CurrentConfig$'
                                .TestOutput = '$OutputBase$/tests/$CurrentPlatform$-$CurrentArchitecture$-$CurrentCompiler$-$CurrentBuildType$-$CurrentConfig$/$ProjectName$.out.txt'
                                .TestArguments = '--force-no-log'
                            }
                        }

                        .LocalProjectSelector = {
                            'All'
                            '$CurrentPlatform$'
                            '$CurrentPlatform$-$CurrentArchitecture$'
                            '$CurrentPlatform$-$CurrentArchitecture$-$CurrentCompiler$'
                        }

                        If (.LocalProjectSelector in .ProjectSelector)
                        {
                            If(.GxProjectComponent_Sdks != .ProjectComponent) {
                                ^MetaBuildAllTargets + '$ProjectName$-$CurrentPlatform$-$CurrentArchitecture$-$CurrentCompiler$-$CurrentBuildType$-$CurrentConfig$'
                                If (.ProjectType == .GxProjectType_UnitTest) {
                                    ^MetaRunAllTargets + 'Test-$ProjectName$-$CurrentPlatform$-$CurrentArchitecture$-$CurrentCompiler$-$CurrentBuildType$-$CurrentConfig$'
                                }
                            }
                        }
                    } // For Each Project

                    //
                    // Define aliases for meta projects.
                    //

                    Alias('Build-All-$CurrentPlatform$-$CurrentArchitecture$-$CurrentCompiler$-$CurrentBuildType$-$CurrentConfig$') {
                        .Targets = .MetaBuildAllTargets
                    }

                    Alias ('Test-All-$CurrentPlatform$-$CurrentArchitecture$-$CurrentCompiler$-$CurrentBuildType$-$CurrentConfig$') {
                        .Targets = .MetaRunAllTargets
                    }
                } // For Each Configuration
            } // For Each BuildType

            Alias('Build-All-$CurrentPlatform$-$CurrentArchitecture$-$CurrentCompiler$') {
                .Targets = {}
                ForEach(.CurrentBuildType in .GxValidBuildTypes) {
                    ForEach(.CurrentConfig in .GxValidConfigurations) {
                        ^Targets + 'Build-All-$CurrentPlatform$-$CurrentArchitecture$-$CurrentCompiler$-$CurrentBuildType$-$CurrentConfig$'
                    }
                }
            }
        } // For Each Architecture
    } // For Each Compiler
} // For Each Platform

// -------------------------------------------------------------------------------------------------
// Define Visual Studio projects
//
// Note:
//      At this point, targets for all meta and regular projects are defined.
//      Due to design choices in FastBuild and Visual Studio project definitions, this script define
//      targets even for projects which doesn't make any sense.
//
// For each platform, we define separate Visual Studio solution.
//

// Projects + Meta: targets known from project name
#if __WINDOWS__

.FbBuildCommand = 'fbuild -ide -cache -monitor -fastcancel -dist'
.FbRebuildCommand = 'fbuild -ide -clean -cache -monitor -fastcancel -dist'
.FbCleanCommand = 'fbuild -ide -fastcancel'

ForEach(.CurrentPlatform in .GxPlatforms) {
    Using(.'GxPlatformDef_$CurrentPlatform$')

    ForEach(.CurrentCompiler in .'GxPlatformCompilers_$CurrentPlatform$') {
        .VcxProjectsList = []
        .VcxBuildableProjects = {}

        // Define Visual Studio projects for all projects available
        ForEach(.CurrentProject in .Global_ProjectList) {
            // Don't care about defaults - just want to list all projects within solution
            Using(.CurrentProject)

            VCXProject('VcxProject-$ProjectName$-$CurrentPlatform$-$CurrentCompiler$') {
                .ProjectConfigs = {}

                ForEach(.CurrentArchitecture in .'GxPlatformArchitectures_$CurrentPlatform$_$CurrentCompiler$') {
                    Using(.'GxToolchainDef_Compiler_$CurrentCompiler$_Architecture_$CurrentArchitecture$')
                    ForEach(.CurrentBuildType in .GxValidBuildTypes) {
                        ForEach(.CurrentConfig in .GxValidConfigurations) {
                            .ConfigEntry = [
                                .Target = '$ProjectName$-$CurrentPlatform$-$CurrentArchitecture$-$CurrentCompiler$-$CurrentBuildType$-$CurrentConfig$'
                                .Config = '$CurrentBuildType$-$CurrentConfig$'
                                .Platform = .VisualStudioPlatform
                                .SolutionConfig = '$CurrentBuildType$-$CurrentConfig$'
                                .SolutionPlatform = '$CurrentPlatform$-$CurrentArchitecture$-$CurrentCompiler$'
                                .ProjectBuildCommand = 'cd ^$(SolutionDir) &amp; $FbBuildCommand$ $Target$'
                                .ProjectRebuildCommand = 'cd ^$(SolutionDir) &amp; $FbRebuildCommand$ $Target$'
                                .ProjectCleanCommand = 'cd ^$(SolutionDir) &amp; $FbCleanCommand$ $Target$-Clean'
                            ]

                            ^ProjectConfigs + .ConfigEntry
                        }
                    }
                }

                .ProjectOutput = 'tmp/$CurrentPlatform$-$CurrentCompiler$/$ProjectName$.vcxproj'
                .ProjectInputPaths = { .ProjectPath }
                .ProjectBasePath = .ProjectPath
                .PlatformToolset = 'v142'
                .OutputDirectory = '^$(SolutionDir)\tmp'
                .IntermediateDirectory = '^$(SolutionDir)\tmp'
            }
            .VcxProjectDescriptor = [
                .'VcxFolder_$ProjectComponent$$ProjectType$' = { 'VcxProject-$ProjectName$-$CurrentPlatform$-$CurrentCompiler$' }
                .VcxBuildableProjects = { 'VcxProject-$ProjectName$-$CurrentPlatform$-$CurrentCompiler$' }
            ]
            ^VcxProjectsList + .VcxProjectDescriptor
            ^VcxBuildableProjects + 'VcxProject-$ProjectName$-$CurrentPlatform$-$CurrentCompiler$'
        }

        .MetaProjectsList = { }
        .MetaProjects = {
            'Build-All'
            'Test-All'
        }

        ForEach(.CurrentMetaProject in .MetaProjects) {
            VCXProject('VcxProject-$CurrentMetaProject$-$CurrentPlatform$-$CurrentCompiler$') {
                .ProjectConfigs = {}

                ForEach(.CurrentArchitecture in .'GxPlatformArchitectures_$CurrentPlatform$_$CurrentCompiler$') {
                    Using(.'GxToolchainDef_Compiler_$CurrentCompiler$_Architecture_$CurrentArchitecture$')

                    ForEach(.CurrentBuildType in .GxValidBuildTypes) {
                        ForEach(.CurrentConfig in .GxValidConfigurations) {
                            .ConfigEntry = [
                                .Target = '$CurrentMetaProject$-$CurrentPlatform$-$CurrentArchitecture$-$CurrentCompiler$-$CurrentBuildType$-$CurrentConfig$'
                                .Config = '$CurrentBuildType$-$CurrentConfig$'
                                .Platform = .VisualStudioPlatform
                                .SolutionConfig = '$CurrentBuildType$-$CurrentConfig$'
                                .SolutionPlatform = '$CurrentPlatform$-$CurrentArchitecture$-$CurrentCompiler$'
                                .ProjectBuildCommand = 'cd ^$(SolutionDir) &amp; $FbBuildCommand$ $Target$'
                                .ProjectRebuildCommand = 'cd ^$(SolutionDir) &amp; $FbRebuildCommand$ $Target$'
                                .ProjectCleanCommand = 'cd ^$(SolutionDir) &amp; $FbCleanCommand$ $Target$-Clean'
                            ]

                            ^ProjectConfigs + .ConfigEntry
                        }
                    }
                }

                .ProjectOutput = 'tmp/$CurrentPlatform$-$CurrentCompiler$/$CurrentMetaProject$.vcxproj'
                .PlatformToolset = 'v142'
                .OutputDirectory = '^$(SolutionDir)\tmp'
                .IntermediateDirectory = '^$(SolutionDir)\tmp'
            }

            ^MetaProjectsList + 'VcxProject-$CurrentMetaProject$-$CurrentPlatform$-$CurrentCompiler$'
        }


        .SolutionConfigs = {}
        // Define Visual Studio solution
        ForEach(.CurrentArchitecture in .'GxPlatformArchitectures_$CurrentPlatform$_$CurrentCompiler$') {
            Using(.'GxToolchainDef_Compiler_$CurrentCompiler$_Architecture_$CurrentArchitecture$')
            ForEach(.CurrentBuildType in .GxValidBuildTypes) {
                ForEach(.CurrentConfig in .GxValidConfigurations) {
                    .CurrentSolutionConfig = [
                        .SolutionPlatform = '$CurrentPlatform$-$CurrentArchitecture$-$CurrentCompiler$'
                        .SolutionConfig = '$CurrentBuildType$-$CurrentConfig$'
                        .Platform = .VisualStudioPlatform
                        .Config = '$CurrentBuildType$-$CurrentConfig$'
                    ]
                    ^SolutionConfigs + .CurrentSolutionConfig
                }
            }
        }

        VSSolution('Solution-Graphyte-$CurrentPlatform$-$CurrentCompiler$') {
           .SolutionOutput = 'Graphyte-$CurrentPlatform$-$CurrentCompiler$.sln'

            Using(.VcxProjectsList)

            .VcxFolderDef_EngineModules = [
                .Path = 'Engine/Modules'
                .Projects = .VcxFolder_EngineModule
            ]

            .VcxFolderDef_EnginePlugins = [
                .Path = 'Engine/Plugins'
                .Projects = .VcxFolder_EnginePlugin
            ]

            .VcxFolderDef_EngineUnitTests = [
                .Path = 'Engine/UnitTest'
                .Projects = .VcxFolder_EngineUnitTest
            ]

            .VcxFolderDef_GameApplications = [
                .Path = 'Game/Application'
                .Projects = .VcxFolder_GameApplication
            ]

            .VcxFolderDef_DeveloperModules = [
                .Path = 'Developer/Modules'
                .Projects = .VcxFolder_DeveloperModule
            ]

            .VcxFolderDef_DeveloperApplications = [
                .Path = 'Developer/Applications'
                .Projects = .VcxFolder_DeveloperApplication
            ]

            .VcxFolderDef_Sdks = [
                .Path = 'Sdks'
                .Projects = .VcxFolder_SdksModule
            ]

            .VcxFolderDef_MetaProjects = [
                .Path = 'Meta'
                .Projects = .MetaProjectsList
            ]

            .SolutionFolders = {
                .VcxFolderDef_EngineModules
                .VcxFolderDef_EnginePlugins
                .VcxFolderDef_EngineUnitTests
                .VcxFolderDef_GameApplications
                .VcxFolderDef_DeveloperModules
                .VcxFolderDef_DeveloperApplications
                .VcxFolderDef_MetaProjects
                .VcxFolderDef_Sdks
            }

            .SolutionBuildProject = 'VcxProject-Build-All-$CurrentPlatform$-$CurrentCompiler$'

            .Local_RunDependencies = [
                .Projects = .VcxBuildableProjects
                .Dependencies = { 'VcxProject-Build-All-$CurrentPlatform$-$CurrentCompiler$' }
            ]

            .SolutionDependencies = {
                .Local_RunDependencies
            }
        }
    }
}
#endif
